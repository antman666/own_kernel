# Maintainer: AntMan666 <945360554@qq.com>
# Contributor: Jan Alexander Steffens (heftig) <jan.steffens@gmail.com>
# Contributor: graysky <graysky AT archlinux DOT us>

### BUILD OPTIONS
# Set the next two variables to ANYTHING that is not null to enable them

# Tweak kernel options prior to a build via nconfig
_makenconfig=y

# Only compile select modules to reduce the number of modules built
#
# To keep track of which modules are needed for your specific system/hardware,
# give module_db a try: https://aur.archlinux.org/packages/modprobed-db
# This PKGBUILD reads the database kept if it exists
# More at this wiki page ---> https://wiki.archlinux.org/index.php/Modprobed-db
_localmodcfg=

## Choose between GCC and CLANG config (default is GCC)
if [ -z ${_compiler+x} ]; then
  _compiler=clang
fi

#  417 Hz is the TT alternative to 300 Hz. Choose 417 Hz
# if you prefer performance over latency.
_417_HZ_ticks=

# 833 Hz is the TT alternative to 1000 Hz. Choose 833 Hz
#  if you want a balance between latency and performance.
_833_HZ_ticks=

# ck recommends 1000 Hz tick and the hrtimer patches in lieu of ck1
_1000_HZ_ticks=

# 1666 Hz is for very high latency bound systems. Choose 1666 Hz
# if you don't care about overall throughput or performance, but
# you care more about latency (some realtime applications) require
# low latency. The response and interactive processes with 1666 Hz
# feel much snappier.
_1666_HZ_ticks=

# Optionally select a sub architecture by number or leave blank which will
# require user interaction during the build. Note that the generic (default)
# option is 39.
_subarch=36

#  1. AMD Opteron/Athlon64/Hammer/K8 (MK8)
#  2. AMD Opteron/Athlon64/Hammer/K8 with SSE3 (MK8SSE3) (NEW)
#  3. AMD 61xx/7x50/PhenomX3/X4/II/K10 (MK10) (NEW)
#  4. AMD Barcelona (MBARCELONA) (NEW)
#  5. AMD Bobcat (MBOBCAT) (NEW)
#  6. AMD Jaguar (MJAGUAR) (NEW)
#  7. AMD Bulldozer (MBULLDOZER) (NEW)
#  8. AMD Piledriver (MPILEDRIVER) (NEW)
#  9. AMD Steamroller (MSTEAMROLLER) (NEW)
#  10. AMD Excavator (MEXCAVATOR) (NEW)
#  11. AMD Zen (MZEN) (NEW)
#  12. AMD Zen 2 (MZEN2) (NEW)
#  13. AMD Zen 3 (MZEN3) (NEW)
#  14. AMD Zen 4 (MZEN4) (NEW)
#  15. Intel P4 / older Netburst based Xeon (MPSC)
#  16. Intel Core 2 (MCORE2)
#  17. Intel Atom (MATOM)
#  18. Intel Nehalem (MNEHALEM) (NEW)
#  19. Intel Westmere (MWESTMERE) (NEW)
#  20. Intel Silvermont (MSILVERMONT) (NEW)
#  21. Intel Goldmont (MGOLDMONT) (NEW)
#  22. Intel Goldmont Plus (MGOLDMONTPLUS) (NEW)
#  23. Intel Sandy Bridge (MSANDYBRIDGE) (NEW)
#  24. Intel Ivy Bridge (MIVYBRIDGE) (NEW)
#  25. Intel Haswell (MHASWELL) (NEW)
#  26. Intel Broadwell (MBROADWELL) (NEW)
#  27. Intel Skylake (MSKYLAKE) (NEW)
#  28. Intel Skylake X (MSKYLAKEX) (NEW)
#  29. Intel Cannon Lake (MCANNONLAKE) (NEW)
#  30. Intel Ice Lake (MICELAKE) (NEW)
#  31. Intel Cascade Lake (MCASCADELAKE) (NEW)
#  32. Intel Cooper Lake (MCOOPERLAKE) (NEW)
#  33. Intel Tiger Lake (MTIGERLAKE) (NEW)
#  34. Intel Sapphire Rapids (MSAPPHIRERAPIDS) (NEW)
#  35. Intel Rocket Lake (MROCKETLAKE) (NEW)
#  36. Intel Alder Lake (MALDERLAKE) (NEW)
#  37. Intel Raptor Lake (MRAPTORLAKE) (NEW)
#  38. Intel Meteor Lake (MMETEORLAKE) (NEW)
#  39. Generic-x86-64 (GENERIC_CPU)
#  40. Generic-x86-64-v2 (GENERIC_CPU2) (NEW)
#  41. Generic-x86-64-v3 (GENERIC_CPU3) (NEW)
#  42. Generic-x86-64-v4 (GENERIC_CPU4) (NEW)
#  43. Intel-Native optimizations autodetected by the compiler (MNATIVE_INTEL) (NEW)
#  44. AMD-Native optimizations autodetected by the compiler (MNATIVE_AMD) (NEW)

### IMPORTANT: Do no edit below this line unless you know what you're doing
pkgbase=linux-tt-lto
pkgver=6.4.2
pkgrel=1
pkgdesc='Linux TT scheduler Kernel with other patches and improvements'
arch=(x86_64)
url="https://github.com/hamadmarri/TT-CPU-Scheduler"
license=(GPL2)
makedepends=(
  bc kmod libelf cpio perl tar xz
)
if [ "${_compiler}" = "clang" ]; then
  makedepends+=(clang llvm lld python polly)
  BUILD_FLAGS=(
    CC=clang
    LD=ld.lld
    LLVM=1
    LLVM_IAS=1
  )
fi
options=('!strip')

_gcc_more_v=20221217
_patchsource="https://raw.githubusercontent.com/CachyOS/kernel-patches/master/6.4"
_patchsources="https://raw.githubusercontent.com/sirlucjan/kernel-patches/master/6.4"
_xanmodpatch="https://raw.githubusercontent.com/xanmod/linux-patches/master/linux-6.4.y-xanmod"
# _patchsource="https://r.zhullyb.top/https://raw.githubusercontent.com/CachyOS/kernel-patches/master/6.4"
# _patchsources="https://r.zhullyb.top/https://raw.githubusercontent.com/sirlucjan/kernel-patches/master/6.4"
# _xanmodpatch="https://r.zhullyb.top/https://raw.githubusercontent.com/xanmod/linux-patches/master/linux-6.4.y-xanmod"
# _patchsource="https://raw.fastgit.org/CachyOS/kernel-patches/master/6.4"
# _patchsources="https://raw.fastgit.org/sirlucjan/kernel-patches/master/6.4"
# _xanmodpatch="https://raw.fastgit.org/xanmod/linux-patches/master/linux-6.4.y-xanmod"

source=(
  "https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-$pkgver.tar".{xz,sign}
  config         # the main kernel config file
  open_O3.patch
  "more-uarches-$_gcc_more_v.tar.gz::https://r.zhullyb.top/https://github.com/graysky2/kernel_compiler_patch/archive/$_gcc_more_v.tar.gz"
  # "${_patchsource}/sched/0001-tt.patch"
  "${_patchsource}/sched/0001-prjc.patch"
  "${_patchsource}/0001-bbr2.patch"
  # "${_patchsource}/0002-bfq.patch"
  "${_patchsource}/0004-fixes.patch"
  # "${_patchsource}/0005-fs-patches.patch"
  "${_patchsource}/0005-ksm.patch"
  # "${_patchsource}/0009-Per-VMA-locks.patch"
  "${_patchsource}/0007-sched.patch"
  "${_xanmodpatch}/intel/0008-drivers-initialize-ata-before-graphics.patch"
  "${_xanmodpatch}/net/tcp/0001-tcp-Add-a-sysctl-to-skip-tcp-collapse-processing-whe.patch"
  "${_xanmodpatch}/xanmod/0001-XANMOD-x86-build-Add-more-x86_64-optimizations.patch"
  "${_xanmodpatch}/xanmod/0009-XANMOD-block-set-rq_affinity-to-force-full-multithre.patch"
  "${_xanmodpatch}/xanmod/0010-XANMOD-kconfig-add-500Hz-timer-interrupt-kernel-conf.patch"
  "${_xanmodpatch}/xanmod/0016-XANMOD-Makefile-Disable-GCC-vectorization-on-trees.patch"
  "${_xanmodpatch}/xanmod/0017-XANMOD-scripts-setlocalversion-remove-tag-for-git-re.patch"
)

validpgpkeys=(
  'ABAF11C65A2970B130ABE3C479BE3E4300411886'  # Linus Torvalds
  '647F28654894E3BD457199BE38DBBDC86092693E'  # Greg Kroah-Hartman
)

b2sums=('691313012a4f20e419c1870d47f642cbadee3da739663f89575011f566b376c1a8a291ffc2db5157e30584cd0f6de444635a85bc178fa819e181ee3e6e7d1202'
        'SKIP'
        'acb781abc6d0625a3fe226fc0c9034e3e0f96529b3a82ec489a5d47aea8b95667ee614b625130dabe17a5b8c5afe62b725759b09e6f4a6129f69ff26aee0eea2'
        '43c428c879343470832aea09cc3926554b95358c5d63e0047b878bde2ef66708faf0d8c7bfd1f9ab277e3c822e87d7b311906aac1ddd2130c7944f59d3735643'
        'd0f6d4189c0a76b0145ff2aa326ef8d38e76cabc097d8aa538dcb79a1a6ddf14172783061e84bff11ceeffe4adc63c566041aef1740a2c6ff5644b6b65366d43'
        'fc758117a5c8d37f61a071075be408f7d56febc44ab9c19079a191c30788aa0aa84ee9b3272c9826bc00f855f417c1d77611e94629095c310aa3f62da16667f1'
        '08b56785d4cfd46adfa39fd1a7c231c68c1d2b3a047398eb4f6613e7b39a267785bacdd9294865d2d0354a23d85ad344d377aa9e7e35f3582bdf9435503ba715'
        '17ea9224fdd89edea6f5d0af143c4cdc23e96b48d5e412153dd813444c7f2d61d4fd5ee390824b5139e09c014d7138fa3bff6d79428915084ada89ae93f10844'
        '4d23dd5fdc5f1de3c0fcaa4d71928a49baf0b34a7eea40e7da152620afa9bd19754ad879bdbc95bfdf85c905cbe4e22abf811de9422bb65760670ae1e340ac56'
        '658c8fcc5b9aa753670fcdf322a2c03b9fc23661ef0153bff8ca482d8efb2ec6bf19944cb0fad7422dd0e6e974e033a391633eecee539dce4245e062e8552d52'
        '65742c310a0c5424551f96e459ef9aceb234287b2cfc5b46186a14deb5847beeaeb6cecab4ce8a96073f4fba4ea34d2ab58f438572dc1f2a4d2b4cf8452d2e74'
        '8249e5ca6feb16e8fb2cc555d5b49dbadbf524e5d0fcca6857f8dac4536d730de1d6c5bee3a7947c03eadbe54c9a1f14f238452ac662d7548f73adcbb9aa9a8a'
        '1d118db1488518dd3264de733cbd9eff1247c7af887d5006105142776b385a3bd2d45de5dad8a128d0bf308b7e153f009660d4fbd51ae44c4199c138081148a1'
        '6616c7c4fab8af6825ced274ce0e33b864d53064602d27fcee904819f76c0cdefd674a803ca8ec31ae0b1947e9e439646b087e63a7988cbaaa7a605cc4783f87'
        '240e5d2cae9292941e71bc19defdf04dbbadaeaa0b959b01fd787a7f2985630bab326ce488a6f91af923fffa79f25f654877e7081f99020857984ba15a87a8c6'
        'b4d31db691eb96119dbf3d53f06b05ac026290c04ed4656ed0b1fc0809a7f2ad321368d22aeb93a2144168f926f493a01e3c6c9a3e577c3feb088e8b0c439ee4'
        'db31b91f5e247949f3223d41e43039bd54a12a4051848b5fd233c56f22872631e13ccf93bc68edde5ff40a6ccce311fb70c04c447f9b1acff423ee3f597778f4')

export KBUILD_BUILD_HOST=archlinux
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

prepare() {
  cd linux-${pkgver}

  msg2 "Setting version..."
  # scripts/setlocalversion --save-scmversion
  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux}" > localversion.20-pkgname

  sed -i '/select DEBUG_KERNEL/d' init/Kconfig
  # sed -i '/depends\ on\ HAVE_KERNEL_UNCOMPRESSED/d' init/Kconfig
  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    msg2 "Applying patch $src..."
    patch -Np1 < "../$src"
  done

  msg2 "Setting config..."
  cp ../config .config

  # clang Full LTO
  if [ "${_compiler}" = "clang" ]; then
    msg2 "Enable FULL LTO"
    scripts/config \
            --enable LTO \
            --enable LTO_CLANG \
            --enable ARCH_SUPPORTS_LTO_CLANG \
            --enable ARCH_SUPPORTS_LTO_CLANG_THIN \
            --disable LTO_NONE \
            --enable HAS_LTO_CLANG \
            --enable LTO_CLANG_FULL \
            --disable LTO_CLANG_THIN
  fi

  scripts/config --enable CONFIG_CGROUPS
  scripts/config --enable CONFIG_RT_GROUP_SCHED
  scripts/config --enable CONFIG_RT_SOFTIRQ_AWARE_SCHED

  # disable CONFIG_DEBUG_INFO=y at build time otherwise memory usage blows up
  # and can easily overwhelm a system with 32 GB of memory using a tmpfs build
  # partition ... this was introduced by FS#66260, see:
  # https://git.archlinux.org/svntogit/packages.git/commit/trunk?h=packages/linux&id=663b08666b269eeeeaafbafaee07fd03389ac8d7
  scripts/config --disable CONFIG_DEBUG_INFO
  scripts/config --disable CONFIG_DEBUG_KERNEL
  scripts/config --disable CONFIG_CGROUP_BPF
  scripts/config --disable CONFIG_BPF_LSM
  scripts/config --disable CONFIG_BPF_PRELOAD
  scripts/config --disable CONFIG_BPF_LIRC_MODE2
  scripts/config --disable CONFIG_BPF_KPROBE_OVERRIDE

  # https://bbs.archlinux.org/viewtopic.php?pid=1824594#p1824594
  scripts/config --enable CONFIG_PSI_DEFAULT_DISABLED

  # https://bbs.archlinux.org/viewtopic.php?pid=1863567#p1863567
  scripts/config --disable CONFIG_LATENCYTOP
  scripts/config --disable CONFIG_SCHED_DEBUG

  # FS#66613
  # https://bugzilla.kernel.org/show_bug.cgi?id=207173#c6
  scripts/config --disable CONFIG_KVM_WERROR
  scripts/config --enable CONFIG_KVM
  scripts/config --enable CONFIG_KVM_INTEL
  scripts/config --disable CONFIG_KVM_AMD

  msg2 "Enable O3"
  scripts/config --disable CONFIG_CC_OPTIMIZE_FOR_SIZE
  scripts/config --enable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3

  msg2 "Selecting TT Scheduler..."
  scripts/config --enable TT_SCHED
  scripts/config --disable TT_ACCOUNTING_STATS

  ### Optionally set tickrate
  if [ -n "$_417_HZ_ticks" ]; then
    msg2 "Setting tick rate to 417Hz..."
    scripts/config --disable CONFIG_HZ_300
    scripts/config --enable CONFIG_HZ_417
    scripts/config --set-val CONFIG_HZ 417
  fi

  if [ -n "$_833_HZ_ticks" ]; then
    msg2 "Setting tick rate to 833Hz..."
    scripts/config --disable CONFIG_HZ_300
    scripts/config --enable CONFIG_HZ_833
    scripts/config --set-val CONFIG_HZ 833
  fi

  if [ -n "$_1000_HZ_ticks" ]; then
    msg2 "Setting tick rate to 1000Hz..."
    scripts/config --disable CONFIG_HZ_300
    scripts/config --enable CONFIG_HZ_1000
    scripts/config --set-val CONFIG_HZ 1000
  fi

  if [ -n "$_1666_HZ_ticks" ]; then
    msg2 "Setting tick rate to 1666Hz..."
    scripts/config --disable CONFIG_HZ_300
    scripts/config --enable CONFIG_HZ_1666
    scripts/config --set-val CONFIG_HZ 1666
  fi

  # BBR2
  msg2 "Enable BBR2"
  scripts/config --module TCP_CONG_CUBIC \
                 --disable DEFAULT_CUBIC \
                 --enable TCP_CONG_BBR2 \
                 --enable DEFAULT_BBR2 \
                 --set-str DEFAULT_TCP_CONG bbr2

  msg2 "Disabling NUMA"
  scripts/config --disable NUMA \
                 --disable AMD_NUMA \
                 --disable X86_64_ACPI_NUMA \
                 --disable NODES_SPAN_OTHER_NODES \
                 --disable NUMA_EMU \
                 --disable NEED_MULTIPLE_NODES \
                 --disable USE_PERCPU_NUMA_NODE_ID \
                 --disable ACPI_NUMA \
                 --disable ARCH_SUPPORTS_NUMA_BALANCING \
                 --disable NODES_SHIFT \
                 --undefine NODES_SHIFT \
                 --disable NEED_MULTIPLE_NODES

  msg2 "Enable zswap compression to LZ4"
  scripts/config --enable CONFIG_ZSMALLOC
  scripts/config --disable CONFIG_ZRAM
  scripts/config --enable CONFIG_ZSWAP
  scripts/config --enable CONFIG_ZSWAP_COMPRESSOR_DEFAULT_LZ4
  scripts/config --enable CONFIG_ZSWAP_ZPOOL_DEFAULT_ZSMALLOC
  scripts/config --set-str CONFIG_ZSWAP_ZPOOL_DEFAULT zsmalloc
  scripts/config --set-str CONFIG_ZSWAP_COMPRESSOR_DEFAULT lz4
  scripts/config --disable CONFIG_ZSWAP_COMPRESSOR_DEFAULT_LZO
  scripts/config --disable CONFIG_ZSWAP_ZPOOL_DEFAULT_ZBUD
  scripts/config --enable CONFIG_ZSWAP_DEFAULT_ON

  # msg2 "Setting performance governor..."
  # scripts/config --enable CONFIG_CPU_FREQ_GOV_ONDEMAND
  # scripts/config --enable CONFIG_CPU_FREQ_GOV_PERFORMANCE
  # scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL
  # scripts/config --enable CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE

  msg2 "Enabling tickless idle"
  scripts/config --disable HZ_PERIODIC \
                 --disable NO_HZ_IDLE \
                 --disable CONTEXT_TRACKING_FORCE \
                 --enable NO_HZ_FULL_NODEF \
                 --enable NO_HZ_FULL \
                 --enable NO_HZ \
                 --enable NO_HZ_COMMON \
                 --enable CONTEXT_TRACKING

  msg2 "Enabling low latency preempt..."
  scripts/config --enable PREEMPT_BUILD \
                 --disable PREEMPT_NONE \
                 --disable PREEMPT_VOLUNTARY \
                 --enable PREEMPT \
                 --enable PREEMPT_COUNT \
                 --enable PREEMPTION \
                 --enable PREEMPT_DYNAMIC

  msg2 "Enabling multigenerational LRU..."
  scripts/config --enable ARCH_HAS_NONLEAF_PMD_YOUNG \
                 --enable LRU_GEN \
                 --enable LRU_GEN_ENABLED \
                 --disable LRU_GEN_STATS \
                 --set-val NR_LRU_GENS 7 \
                 --set-val TIERS_PER_GEN 4

  msg2 "disable debugging features to reduce the size..."
  scripts/config --disable DEBUG_INFO \
                 --disable DEBUG_INFO_BTF \
                 --disable DEBUG_INFO_DWARF4 \
                 --disable DEBUG_INFO_DWARF5 \
                 --disable PAHOLE_HAS_SPLIT_BTF \
                 --disable DEBUG_INFO_BTF_MODULES \
                 --disable SLUB_DEBUG \
                 --disable PM_DEBUG \
                 --disable PM_ADVANCED_DEBUG \
                 --disable PM_SLEEP_DEBUG \
                 --disable ACPI_DEBUG \
                 --disable SCHED_DEBUG \
                 --disable LATENCYTOP \
                 --disable DEBUG_PREEMPT

  make ${BUILD_FLAGS[*]} olddefconfig
  diff -u ../config .config || :

  # https://github.com/graysky2/kernel_gcc_patch
  # make sure to apply after olddefconfig to allow the next section
  msg2 "Patching to enable GCC optimization for other uarchs..."
  patch -Np1 -i "$srcdir/kernel_compiler_patch-$_gcc_more_v/more-uarches-for-kernel-5.17+.patch"

  if [ -n "$_subarch" ]; then
    # user wants a subarch so apply choice defined above interactively via 'yes'
    yes "$_subarch" | make ${BUILD_FLAGS[*]} oldconfig
  else
    # no subarch defined so allow user to pick one
    make ${BUILD_FLAGS[*]} oldconfig
  fi

  ### Optionally load needed modules for the make localmodconfig
  # See https://aur.archlinux.org/packages/modprobed-db
  if [ -n "$_localmodcfg" ]; then
    if [ -f $HOME/.config/modprobed.db ]; then
      msg2 "Running Steven Rostedt's make localmodconfig now"
      make ${BUILD_FLAGS[*]} LSMOD=$HOME/.config/modprobed.db localmodconfig
    else
      msg2 "No modprobed.db data found"
      exit
    fi
  fi

  make ${BUILD_FLAGS[*]} -s kernelrelease > version
  echo "Prepared $pkgbase version $(<version)"

  [[ -z "$_makenconfig" ]] || make ${BUILD_FLAGS[*]} nconfig

  # save configuration for later reuse
  cat .config > "${startdir}/config.last"
}

build() {
  cd linux-${pkgver}
  make ${BUILD_FLAGS[*]} all
}

_package() {
  pkgdesc="The ${pkgbase/linux/Linux} kernel and modules with Con Kolivas' hrtimer patches and TT CPU scheduler by Hamad Al Marri and with some other patches"
  depends=(coreutils kmod initramfs)
  optdepends=('crda: to set the correct wireless channels of your country'
              'linux-firmware: firmware images needed for some devices')
  provides=(kvm winesync)
  # groups=('tt-uksm')

  cd linux-${pkgver}

  local kernver="$(<version)"
  local modulesdir="$pkgdir/usr/lib/modules/$kernver"

  echo "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  #install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"
  #
  # hard-coded path in case user defined CC=xxx for build which causes errors
  # see this FS https://bugs.archlinux.org/task/64315
  install -Dm644 arch/x86/boot/bzImage "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  echo "Installing modules..."
  #make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 modules_install
  # not needed since not building with CONFIG_DEBUG_INFO=y

  make LLVM=$_LLVM LLVM_IAS=$_LLVM INSTALL_MOD_PATH="$pkgdir/usr" modules_install

  # remove build and source links
  rm "$modulesdir"/{source,build}
}

_package-headers() {
  pkgdesc="Headers and scripts for building modules for ${pkgbase/linux/Linux} kernel"
  depends=("$pkgbase") # added to keep kernel and headers packages matched
  # groups=('tt-uksm')

  cd linux-${pkgver}
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts

  # add objtool for external module building and enabled VALIDATION_STACK option
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # add xfs and shmem for aufs building
  mkdir -p "$builddir"/{fs/xfs,mm}

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -bi "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  #echo "Stripping vmlinux..."
  #strip -v $STRIP_STATIC "$builddir/vmlinux"
  # not needed since not building with CONFIG_DEBUG_INFO=y

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"

}

pkgname=("$pkgbase" "$pkgbase-headers")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done

# vim:set ts=8 sts=2 sw=2 et:
