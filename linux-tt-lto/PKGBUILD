# Maintainer: AntMan666 <945360554@qq.com>
# Contributor: Jan Alexander Steffens (heftig) <jan.steffens@gmail.com>
# Contributor: graysky <graysky AT archlinux DOT us>

### BUILD OPTIONS
# Set the next two variables to ANYTHING that is not null to enable them

# Tweak kernel options prior to a build via nconfig
_makenconfig=y

# Only compile select modules to reduce the number of modules built
#
# To keep track of which modules are needed for your specific system/hardware,
# give module_db a try: https://aur.archlinux.org/packages/modprobed-db
# This PKGBUILD reads the database kept if it exists
# More at this wiki page ---> https://wiki.archlinux.org/index.php/Modprobed-db
_localmodcfg=

## Choose between GCC and CLANG config (default is GCC)
if [ -z ${_compiler+x} ]; then
  _compiler=clang
fi

#  417 Hz is the TT alternative to 300 Hz. Choose 417 Hz
# if you prefer performance over latency.
_417_HZ_ticks=

# 833 Hz is the TT alternative to 1000 Hz. Choose 833 Hz
#  if you want a balance between latency and performance.
_833_HZ_ticks=

# ck recommends 1000 Hz tick and the hrtimer patches in lieu of ck1
_1000_HZ_ticks=y
 
# 1666 Hz is for very high latency bound systems. Choose 1666 Hz
# if you don't care about overall throughput or performance, but
# you care more about latency (some realtime applications) require
# low latency. The response and interactive processes with 1666 Hz
# feel much snappier.
_1666_HZ_ticks=

# Optionally select a sub architecture by number or leave blank which will
# require user interaction during the build. Note that the generic (default)
# option is 36.
#
#  1. AMD Opteron/Athlon64/Hammer/K8 (MK8)
#  2. AMD Opteron/Athlon64/Hammer/K8 with SSE3 (MK8SSE3) (NEW)
#  3. AMD 61xx/7x50/PhenomX3/X4/II/K10 (MK10) (NEW)
#  4. AMD Barcelona (MBARCELONA) (NEW)
#  5. AMD Bobcat (MBOBCAT) (NEW)
#  6. AMD Jaguar (MJAGUAR) (NEW)
#  7. AMD Bulldozer (MBULLDOZER) (NEW)
#  8. AMD Piledriver (MPILEDRIVER) (NEW)
#  9. AMD Steamroller (MSTEAMROLLER) (NEW)
#  10. AMD Excavator (MEXCAVATOR) (NEW)
#  11. AMD Zen (MZEN) (NEW)
#  12. AMD Zen 2 (MZEN2) (NEW)
#  13. AMD Zen 3 (MZEN3) (NEW)
#  14. Intel P4 / older Netburst based Xeon (MPSC)
#  15. Intel Core 2 (MCORE2)
#  16. Intel Atom (MATOM)
#  17. Intel Nehalem (MNEHALEM) (NEW)
#  18. Intel Westmere (MWESTMERE) (NEW)
#  19. Intel Silvermont (MSILVERMONT) (NEW)
#  20. Intel Goldmont (MGOLDMONT) (NEW)
#  21. Intel Goldmont Plus (MGOLDMONTPLUS) (NEW)
#  22. Intel Sandy Bridge (MSANDYBRIDGE) (NEW)
#  23. Intel Ivy Bridge (MIVYBRIDGE) (NEW)
#  24. Intel Haswell (MHASWELL) (NEW)
#  25. Intel Broadwell (MBROADWELL) (NEW)
#  26. Intel Skylake (MSKYLAKE) (NEW)
#  27. Intel Skylake X (MSKYLAKEX) (NEW)
#  28. Intel Cannon Lake (MCANNONLAKE) (NEW)
#  29. Intel Ice Lake (MICELAKE) (NEW)
#  30. Intel Cascade Lake (MCASCADELAKE) (NEW)
#  31. Intel Cooper Lake (MCOOPERLAKE) (NEW)
#  32. Intel Tiger Lake (MTIGERLAKE) (NEW)
#  33. Intel Sapphire Rapids (MSAPPHIRERAPIDS) (NEW)
#  34. Intel Rocket Lake (MROCKETLAKE) (NEW)
#  35. Intel Alder Lake (MALDERLAKE) (NEW)
#  36. Generic-x86-64 (GENERIC_CPU)
#  37. Generic-x86-64-v2 (GENERIC_CPU2) (NEW)
#  38. Generic-x86-64-v3 (GENERIC_CPU3) (NEW)
#  39. Generic-x86-64-v4 (GENERIC_CPU4) (NEW)
#  40. Intel-Native optimizations autodetected by GCC (MNATIVE_INTEL) (NEW)
#  41. AMD-Native optimizations autodetected by GCC (MNATIVE_AMD) (NEW)
_subarch=15

### IMPORTANT: Do no edit below this line unless you know what you're doing
pkgbase=linux-tt-lto
pkgver=6.0.13
pkgrel=1
pkgdesc='Linux TT scheduler Kernel with other patches and improvements'
arch=(x86_64)
url="https://github.com/hamadmarri/TT-CPU-Scheduler"
license=(GPL2)
makedepends=(
  bc kmod libelf cpio perl tar xz
)
if [ "${_compiler}" = "clang" ]; then
  makedepends+=(clang llvm lld python)
  BUILD_FLAGS=(
    CC=clang
    LD=ld.lld
    LLVM=1
    LLVM_IAS=1
  )
fi
options=('!strip')

# https://ck-hack.blogspot.com/2021/08/514-and-future-of-muqss-and-ck-once.html
# acknowledgment to xanmod for initially keeping the hrtimer patches up to date
#_ckhrtimer=linux-6.0.y
#_commit=5be918e798e2c2cc94fa7dd0f6f031921a4f7598

_gcc_more_v=20221104
_patchsource="https://raw.githubusercontent.com/CachyOS/kernel-patches/master/6.0"
# _patchsource="https://raw.fastgit.org/CachyOS/kernel-patches/master/6.0"
_patchsources="https://raw.githubusercontent.com/sirlucjan/kernel-patches/master/6.0"

source=(
  "https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-$pkgver.tar".{xz,sign}
  config         # the main kernel config file
  open_O3.patch
  "more-uarches-$_gcc_more_v.tar.gz::https://github.com/graysky2/kernel_compiler_patch/archive/$_gcc_more_v.tar.gz"
  # "ck-hrtimer-$_commit.tar.gz::https://github.com/graysky2/linux-patches/archive/$_commit.tar.gz"
  "${_patchsource}/sched/0001-tt.patch"
  "${_patchsource}/misc/0001-ck-hrtimer.patch"
  "${_patchsource}/misc/0001-mm-add-zblock-new-allocator-for-use-via-zpool-API.patch"
  "${_patchsource}/0002-bbr2.patch"
  "${_patchsource}/0003-futex-winesync.patch"
  "${_patchsource}/0005-mm-Introduce-the-maple-tree-with-MG-LRU.patch"
  "${_patchsource}/0006-mm-multi-gen-LRU-memcg-LRU.patch"
  "${_patchsource}/0007-mm-demotion-Memory-tiers-and-demotion.patch"
  "${_patchsource}/0009-lrng.patch"
  "${_patchsource}/0010-folios.patch"
  "${_patchsource}/0011-fixes.patch"
  "${_patchsource}/0015-ksm.patch"
  "${_patchsource}/0017-fs-patches.patch"
  "${_patchsource}/0019-bfq.patch"
  "https://github.com/xanmod/linux-patches/raw/master/linux-6.0.y-xanmod/xanmod/0001-XANMOD-x86-build-Add-more-x86_64-optimizations.patch"
  # "https://github.com/xanmod/linux-patches/raw/master/linux-6.0.y-xanmod/xanmod/0002-XANMOD-fair-Remove-all-energy-efficiency-functions.patch"
  # "https://github.com/xanmod/linux-patches/raw/master/linux-6.0.y-xanmod/xanmod/0003-XANMOD-sched-core-Add-yield_type-sysctl-to-reduce-or.patch"
  # "https://github.com/xanmod/linux-patches/raw/master/linux-6.0.y-xanmod/xanmod/0005-XANMOD-block-mq-deadline-Increase-write-priority-to-.patch"
  "https://github.com/xanmod/linux-patches/raw/master/linux-6.0.y-xanmod/xanmod/0007-XANMOD-block-set-rq_affinity-to-force-full-multithre.patch"
  # "https://github.com/xanmod/linux-patches/raw/master/linux-6.0.y-xanmod/xanmod/0009-XANMOD-dcache-cache_pressure-50-decreases-the-rate-a.patch"
  # "https://github.com/xanmod/linux-patches/raw/master/linux-6.0.y-xanmod/xanmod/0011-XANMOD-sched-autogroup-Add-kernel-parameter-and-conf.patch"
  "https://github.com/xanmod/linux-patches/raw/master/linux-6.0.y-xanmod/xanmod/0014-XANMOD-Makefile-Disable-GCC-vectorization-on-trees.patch"
  "https://github.com/xanmod/linux-patches/raw/master/linux-6.0.y-xanmod/xanmod/0015-XANMOD-scripts-setlocalversion-remove-tag-for-git-re.patch"
)

validpgpkeys=(
  'ABAF11C65A2970B130ABE3C479BE3E4300411886'  # Linus Torvalds
  '647F28654894E3BD457199BE38DBBDC86092693E'  # Greg Kroah-Hartman
)

b2sums=('b37026b1cab3079507ff80de9a32c753552689d30fb13898b9b7dd419dfb73785259976ad13fc08b5085b71ca94b84f40b5caf236b13b435c37a3736d64130da'
        'SKIP'
        '6412d31e8c616b5f81a36890279e1f9dbcb369ad8022281e297946758b6a0086198ef118e19a39700890e33d67554c0df88d571db3089d0dddb72fc3b3641239'
        '3ead43f3d5fea5f24a909f4204e09ca634da71979fc147cc4426a5c79b66968767c9281697983b5a09a2de416a6fcbd35d05a07af87caa82332e61af49e29c24'
        '05bddc2b57189d7e302f32041079bcf60a06938e9afcfd02a0085a1430255286a5b663eed7cdb7f857717c65e9e27af4d15625b17e0a36d1b4ce1cbda6baee2b'
        '89896ca8ecadb5ae0b6c4087e23e2c02e55bbec97cebc43c2d08f0636f307c0b41799238b2f0170e71d7d10990e5513513eea43263403d6909300eca3034d013'
        'beb8ad6025b2d4473c4fdc7e1dd132c963bcfc7a7f443dc2f4c989cfcb9156754c90a2dc0b833528377564c957ef1e1e10c181762284e30a8e78e580ce9c2e53'
        '102d6c471454bb87d172570b0916bcd026293fc1a8f7b647ba124ac2b2bcabe47ecb427109799310de770a136db1d2d65d62fc9b652e6a579bb24114b392e101'
        '82808fa043b3a0ec6ce9f3b3552b8a176f41f3a39c199b74e391f08c7ec4ddb4ac9184128d1af4de4115a4945496b6f7ece47b90798036449bb1e6fba2e5daeb'
        'b67a8cfa773a38cc9f77d83292302cb68140cb32c3c79d0378183d311973fa2d3e2caef039f850ad8aedbe992f6e150cad896ceeda48334dafd9ce04c6a2e4d5'
        '16404790412ef633b596f2288e7b1c7394ebea2162e93b0e62fd4b6f482d211f942e2e306f4db0320218f9146b06889957332854a91f790c8d3df8fef9012ff2'
        '41a4f4ceb7ea54a396c0a54796a7583239813cba80e8e4fe60dc8b7b6291f0e2df2b92c90f3af82b8f13885920a9702e1a4810f4b6d11618a59d4f6d9bdf47f8'
        '60bc1c220227418a4915d8f61457b1f94c28160a17e727ef17f367d959371f7fe8d21f533a497c89bb4e79cd1e3dba12cd1647f71639f335225315c6f86eeef9'
        'a42297b5ef4237d49313de85218a600392454dd72d20c2451b07b154d1c889e10df01ac50b619d0fd7e7976f7724eea5ff17755912c0b1170dde617ab6a7cc2a'
        'ff166fcae321eb389cd056463077064680c0aedc6c1e610c238da3fe7365473346ab39a4594d964ad72c22cde4b72e6037dad4bf3c901ffd5055ea28531a5bb7'
        '7db58a3243621320ab45d345e4161fb4fd0c18a01a006e75813289de1038b6da6f7645029aee5bf6e6b1b7f845e39c87117facece963edfcda93a5ecf01fd38a'
        '1d2c31230d4a2efb2763dabcfe95f7136a7d3bdef792cedf1e40f6df2847279268f232a4996c32aab20e24166702a7ac1685b092fbe8a3dcbd3705134fd49dc3'
        'a7b02843b29e5bc108b3d1f2b74730470764d1d2463d02c004ebda8866ef208905374df4af069a6e82b5258c48869b8b53eef9f13927030eb106dfb48e8c2d25'
        '94b381894d34bf12ce42d67a3e5374102433606e4b5ea12d9c95b59d920aef2ee963271311bddeeed01fb9a2c11f78a054f8489eee61f4a80de1ed3a398cda18'
        'a810a565663a6fa8fbe6ae47d73844633289514882269fdd441afb27fa68aca221065ca14114e27f606452d65a594bf453c012756f16653fe849b40f47596bd6'
        'bcf5a5e7b1b5830515cddabd40b74fe5ed0f5c797e7198e0220d6df83228f717f431f8947def8d8f3000c599e602b95679fc426b6e8fa8585494b28dc5398f00'
        '1dc2fcec39d40c0d72354edc422acfa4a2d1e1ee81651bb337ed3b6af91a5755253b1ecc6d93354dacba6ceed9920185a760e7e97768891122ad51abc51a595e'
        '87692fcafeade4e6266f1b1cc181288f6ddec23b6753d47a7ba0ce1989fb94a576a1fa45bdea749b7c0e2bf3bc0aced18fc3d588e1f37e5bca3b6ebb4893e0c8')

export KBUILD_BUILD_HOST=archlinux
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

prepare() {
  cd linux-${pkgver}

  msg2 "Setting version..."
  scripts/setlocalversion --save-scmversion
  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux}" > localversion.20-pkgname

  sed -i '/select DEBUG_KERNEL/d' init/Kconfig
  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    msg2 "Applying patch $src..."
    patch -Np1 < "../$src"
  done

  msg2 "Setting config..."
  cp ../config .config

  # clang Full LTO
  if [ "${_compiler}" = "clang" ]; then
    msg2 "Enable FULL LTO"
    scripts/config \
            --enable LTO \
            --enable LTO_CLANG \
            --enable ARCH_SUPPORTS_LTO_CLANG \
            --enable ARCH_SUPPORTS_LTO_CLANG_THIN \
            --disable LTO_NONE \
            --enable HAS_LTO_CLANG \
            --enable LTO_CLANG_FULL \
            --disable LTO_CLANG_THIN
  fi

  scripts/config --enable CONFIG_CGROUPS
  scripts/config --enable CONFIG_RT_GROUP_SCHED

  # disable CONFIG_DEBUG_INFO=y at build time otherwise memory usage blows up
  # and can easily overwhelm a system with 32 GB of memory using a tmpfs build
  # partition ... this was introduced by FS#66260, see:
  # https://git.archlinux.org/svntogit/packages.git/commit/trunk?h=packages/linux&id=663b08666b269eeeeaafbafaee07fd03389ac8d7
  scripts/config --disable CONFIG_DEBUG_INFO
  scripts/config --disable CONFIG_DEBUG_KERNEL
  scripts/config --disable CONFIG_CGROUP_BPF
  scripts/config --disable CONFIG_BPF_LSM
  scripts/config --disable CONFIG_BPF_PRELOAD
  scripts/config --disable CONFIG_BPF_LIRC_MODE2
  scripts/config --disable CONFIG_BPF_KPROBE_OVERRIDE

  # https://bbs.archlinux.org/viewtopic.php?pid=1824594#p1824594
  scripts/config --enable CONFIG_PSI_DEFAULT_DISABLED

  # https://bbs.archlinux.org/viewtopic.php?pid=1863567#p1863567
  scripts/config --disable CONFIG_LATENCYTOP
  scripts/config --disable CONFIG_SCHED_DEBUG

  # FS#66613
  # https://bugzilla.kernel.org/show_bug.cgi?id=207173#c6
  scripts/config --disable CONFIG_KVM_WERROR
  scripts/config --enable CONFIG_KVM
  scripts/config --enable CONFIG_KVM_INTEL
  scripts/config --disable CONFIG_KVM_AMD

 
  msg2 "Enable O3"
  scripts/config --disable CONFIG_CC_OPTIMIZE_FOR_SIZE
  scripts/config --enable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3 

  msg2 "Enabling Linux Random Number Generator ..."
  scripts/config --disable CONFIG_RANDOM_DEFAULT_IMPL
  scripts/config --enable CONFIG_LRNG
  scripts/config --enable CONFIG_LRNG_SHA256
  scripts/config --enable CONFIG_LRNG_COMMON_DEV_IF
  scripts/config --enable CONFIG_LRNG_DRNG_ATOMIC
  scripts/config --enable CONFIG_LRNG_SYSCTL
  scripts/config --enable CONFIG_LRNG_RANDOM_IF
  scripts/config --module CONFIG_LRNG_KCAPI_IF
  scripts/config --module CONFIG_LRNG_HWRAND_IF
  scripts/config --enable CONFIG_LRNG_DEV_IF
  scripts/config --enable CONFIG_LRNG_RUNTIME_ES_CONFIG
  scripts/config --enable CONFIG_LRNG_IRQ_DFLT_TIMER_ES
  scripts/config --disable CONFIG_LRNG_SCHED_DFLT_TIMER_ES
  scripts/config --enable CONFIG_LRNG_TIMER_COMMON
  scripts/config --disable CONFIG_LRNG_COLLECTION_SIZE_256
  scripts/config --disable CONFIG_LRNG_COLLECTION_SIZE_512
  scripts/config --enable CONFIG_LRNG_COLLECTION_SIZE_1024
  scripts/config --disable CONFIG_LRNG_COLLECTION_SIZE_2048
  scripts/config --disable CONFIG_LRNG_COLLECTION_SIZE_4096
  scripts/config --disable CONFIG_LRNG_COLLECTION_SIZE_8192
  scripts/config --set-val CONFIG_LRNG_COLLECTION_SIZE 1024
  scripts/config --enable CONFIG_LRNG_HEALTH_TESTS
  scripts/config --set-val CONFIG_LRNG_RCT_CUTOFF 31
  scripts/config --set-val CONFIG_LRNG_APT_CUTOFF 325
  scripts/config --enable CONFIG_LRNG_IRQ
  scripts/config --enable CONFIG_LRNG_CONTINUOUS_COMPRESSION_ENABLED
  scripts/config --disable CONFIG_LRNG_CONTINUOUS_COMPRESSION_DISABLED
  scripts/config --enable CONFIG_LRNG_ENABLE_CONTINUOUS_COMPRESSION
  scripts/config --enable CONFIG_LRNG_SWITCHABLE_CONTINUOUS_COMPRESSION
  scripts/config --set-val CONFIG_LRNG_IRQ_ENTROPY_RATE 256
  scripts/config --enable CONFIG_LRNG_JENT
  scripts/config --set-val CONFIG_LRNG_JENT_ENTROPY_RATE 16
  scripts/config --enable CONFIG_LRNG_CPU
  scripts/config --set-val CONFIG_LRNG_CPU_FULL_ENT_MULTIPLIER 1
  scripts/config --set-val CONFIG_LRNG_CPU_ENTROPY_RATE 8
  scripts/config --enable CONFIG_LRNG_SCHED
  scripts/config --set-val CONFIG_LRNG_SCHED_ENTROPY_RATE 4294967295
  scripts/config --enable CONFIG_LRNG_DRNG_CHACHA20
  scripts/config --module CONFIG_LRNG_DRBG
  scripts/config --module CONFIG_LRNG_DRNG_KCAPI
  scripts/config --enable CONFIG_LRNG_SWITCH
  scripts/config --enable CONFIG_LRNG_SWITCH_HASH
  scripts/config --module CONFIG_LRNG_HASH_KCAPI
  scripts/config --enable CONFIG_LRNG_SWITCH_DRNG
  scripts/config --module CONFIG_LRNG_SWITCH_DRBG
  scripts/config --module CONFIG_LRNG_SWITCH_DRNG_KCAPI
  scripts/config --enable CONFIG_LRNG_DFLT_DRNG_CHACHA20
  scripts/config --disable CONFIG_LRNG_DFLT_DRNG_DRBG
  scripts/config --disable CONFIG_LRNG_DFLT_DRNG_KCAPI
  scripts/config --enable CONFIG_LRNG_TESTING_MENU
  scripts/config --disable CONFIG_LRNG_RAW_HIRES_ENTROPY
  scripts/config --disable CONFIG_LRNG_RAW_JIFFIES_ENTROPY
  scripts/config --disable CONFIG_LRNG_RAW_IRQ_ENTROPY
  scripts/config --disable CONFIG_LRNG_RAW_RETIP_ENTROPY
  scripts/config --disable CONFIG_LRNG_RAW_REGS_ENTROPY
  scripts/config --disable CONFIG_LRNG_RAW_ARRAY
  scripts/config --disable CONFIG_LRNG_IRQ_PERF
  scripts/config --disable CONFIG_LRNG_RAW_SCHED_HIRES_ENTROPY
  scripts/config --disable CONFIG_LRNG_RAW_SCHED_PID_ENTROPY
  scripts/config --disable CONFIG_LRNG_RAW_SCHED_START_TIME_ENTROPY
  scripts/config --disable CONFIG_LRNG_RAW_SCHED_NVCSW_ENTROPY
  scripts/config --disable CONFIG_LRNG_SCHED_PERF
  scripts/config --disable CONFIG_LRNG_ACVT_HASH
  scripts/config --disable CONFIG_LRNG_RUNTIME_MAX_WO_RESEED_CONFIG
  scripts/config --disable CONFIG_LRNG_TEST_CPU_ES_COMPRESSION
  scripts/config --enable CONFIG_LRNG_SELFTEST
  scripts/config --disable CONFIG_LRNG_SELFTEST_PANIC

  msg2 "Selecting TT Scheduler..."
  scripts/config --enable TT_SCHED
  scripts/config --disable TT_ACCOUNTING_STATS

  ### Optionally set tickrate 
  if [ -n "$_417_HZ_ticks" ]; then
    msg2 "Setting tick rate to 417Hz..."
    scripts/config --disable CONFIG_HZ_300
    scripts/config --enable CONFIG_HZ_417
    scripts/config --set-val CONFIG_HZ 417
  fi 
  
  if [ -n "$_833_HZ_ticks" ]; then
    msg2 "Setting tick rate to 833Hz..."
    scripts/config --disable CONFIG_HZ_300
    scripts/config --enable CONFIG_HZ_833
    scripts/config --set-val CONFIG_HZ 833
  fi

  if [ -n "$_1000_HZ_ticks" ]; then
    msg2 "Setting tick rate to 1000Hz..."
    scripts/config --disable CONFIG_HZ_300
    scripts/config --enable CONFIG_HZ_1000
    scripts/config --set-val CONFIG_HZ 1000
  fi

  if [ -n "$_1666_HZ_ticks" ]; then
    msg2 "Setting tick rate to 1666Hz..."
    scripts/config --disable CONFIG_HZ_300
    scripts/config --enable CONFIG_HZ_1666
    scripts/config --set-val CONFIG_HZ 1666
  fi

  # BBR2
  msg2 "Enable BBR2"
  scripts/config --module TCP_CONG_CUBIC \
                 --disable DEFAULT_CUBIC \
                 --enable TCP_CONG_BBR2 \
                 --enable DEFAULT_BBR2 \
                 --set-str DEFAULT_TCP_CONG bbr2
  
  msg2 "Disabling NUMA"
  scripts/config --disable NUMA \
                 --disable AMD_NUMA \
                 --disable X86_64_ACPI_NUMA \
                 --disable NODES_SPAN_OTHER_NODES \
                 --disable NUMA_EMU \
                 --disable NEED_MULTIPLE_NODES \
                 --disable USE_PERCPU_NUMA_NODE_ID \
                 --disable ACPI_NUMA \
                 --disable ARCH_SUPPORTS_NUMA_BALANCING \
                 --disable NODES_SHIFT \
                 --undefine NODES_SHIFT \
                 --disable NEED_MULTIPLE_NODES

  msg2 "Enable zswap compression to LZ4"
  scripts/config --enable CONFIG_ZSMALLOC
  scripts/config --disable CONFIG_ZRAM
  scripts/config --enable CONFIG_ZSWAP
  scripts/config --enable CONFIG_ZSWAP_COMPRESSOR_DEFAULT_LZ4
  scripts/config --enable CONFIG_ZSWAP_ZPOOL_DEFAULT_ZSMALLOC
  scripts/config --set-str CONFIG_ZSWAP_ZPOOL_DEFAULT zsmalloc
  scripts/config --set-str CONFIG_ZSWAP_COMPRESSOR_DEFAULT lz4
  scripts/config --disable CONFIG_ZSWAP_COMPRESSOR_DEFAULT_LZO
  scripts/config --disable CONFIG_ZSWAP_ZPOOL_DEFAULT_ZBUD
  scripts/config --enable CONFIG_ZSWAP_DEFAULT_ON

  msg2 "Setting performance governor..."
  scripts/config --enable CONFIG_CPU_FREQ_GOV_ONDEMAND
  scripts/config --enable CONFIG_CPU_FREQ_GOV_PERFORMANCE
  scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL
  scripts/config --enable CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE

  msg2 "Enabling tickless idle"
  scripts/config --disable HZ_PERIODIC \
                 --disable NO_HZ_IDLE \
                 --disable CONTEXT_TRACKING_FORCE \
                 --enable NO_HZ_FULL_NODEF \
                 --enable NO_HZ_FULL \
                 --enable NO_HZ \
                 --enable NO_HZ_COMMON \
                 --enable CONTEXT_TRACKING

  msg2 "Enabling low latency preempt..."
  scripts/config --enable PREEMPT_BUILD \
                 --disable PREEMPT_NONE \
                 --disable PREEMPT_VOLUNTARY \
                 --enable PREEMPT \
                 --enable PREEMPT_COUNT \
                 --enable PREEMPTION \
                 --enable PREEMPT_DYNAMIC
    
  msg2 "Enabling multigenerational LRU..."
  scripts/config --enable ARCH_HAS_NONLEAF_PMD_YOUNG \
                 --enable LRU_GEN \
                 --enable LRU_GEN_ENABLED \
                 --disable LRU_GEN_STATS \
                 --set-val NR_LRU_GENS 7 \
                 --set-val TIERS_PER_GEN 4

  # msg2 "Enabling DAMON"
  # scripts/config --enable DAMON \
  #                --disable DAMON_VADDR \
  #                --disable DAMON_DBGFS \
  #                --enable DAMON_SYSFS \
  #                --enable DAMON_PADDR \
  #                --enable DAMON_RECLAIM

  msg2 "disable debugging features to reduce the size..."
  scripts/config --disable DEBUG_INFO \
                 --disable DEBUG_INFO_BTF \
                 --disable DEBUG_INFO_DWARF4 \
                 --disable DEBUG_INFO_DWARF5 \
                 --disable PAHOLE_HAS_SPLIT_BTF \
                 --disable DEBUG_INFO_BTF_MODULES \
                 --disable SLUB_DEBUG \
                 --disable PM_DEBUG \
                 --disable PM_ADVANCED_DEBUG \
                 --disable PM_SLEEP_DEBUG \
                 --disable ACPI_DEBUG \
                 --disable SCHED_DEBUG \
                 --disable LATENCYTOP \
                 --disable DEBUG_PREEMPT

  # msg2 "Enable ZRAM_ENTROPY"
  # scripts/config --enable ZRAM_ENTROPY \
  #                --set-val ZRAM_ENTROPY_THRESHOLD 100000

  # these are ck's htrimer patches
  # msg2 "Patching with ck hrtimer patches..."

  # for i in ../linux-patches-"$_commit"/"$_ckhrtimer"/ck-hrtimer/0*.patch; do
  #   patch -Np1 -i $i
  # done

  # non-interactively apply ck1 default options
  # this isn't redundant if we want a clean selection of subarch below
  make ${BUILD_FLAGS[*]} olddefconfig
  diff -u ../config .config || :

  # https://github.com/graysky2/kernel_gcc_patch
  # make sure to apply after olddefconfig to allow the next section
  msg2 "Patching to enable GCC optimization for other uarchs..."
  patch -Np1 -i "$srcdir/kernel_compiler_patch-$_gcc_more_v/more-uarches-for-kernel-5.17+.patch"

  if [ -n "$_subarch" ]; then
    # user wants a subarch so apply choice defined above interactively via 'yes'
    yes "$_subarch" | make ${BUILD_FLAGS[*]} oldconfig
  else
    # no subarch defined so allow user to pick one
    make ${BUILD_FLAGS[*]} oldconfig
  fi

  ### Optionally load needed modules for the make localmodconfig
  # See https://aur.archlinux.org/packages/modprobed-db
  if [ -n "$_localmodcfg" ]; then
    if [ -f $HOME/.config/modprobed.db ]; then
      msg2 "Running Steven Rostedt's make localmodconfig now"
      make ${BUILD_FLAGS[*]} LSMOD=$HOME/.config/modprobed.db localmodconfig
    else
      msg2 "No modprobed.db data found"
      exit
    fi
  fi

  make ${BUILD_FLAGS[*]} -s kernelrelease > version
  echo "Prepared $pkgbase version $(<version)"

  [[ -z "$_makenconfig" ]] || make ${BUILD_FLAGS[*]} nconfig

  # save configuration for later reuse
  cat .config > "${startdir}/config.last"
}

build() {
  cd linux-${pkgver}
  make ${BUILD_FLAGS[*]} all
}

_package() {
  pkgdesc="The ${pkgbase/linux/Linux} kernel and modules with Con Kolivas' hrtimer patches and TT CPU scheduler by Hamad Al Marri and with some other patches"
  depends=(coreutils kmod initramfs)
  optdepends=('crda: to set the correct wireless channels of your country'
              'linux-firmware: firmware images needed for some devices')
  provides=(kvm winesync)
  # groups=('tt-uksm')

  cd linux-${pkgver}

  local kernver="$(<version)"
  local modulesdir="$pkgdir/usr/lib/modules/$kernver"

  echo "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  #install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"
  #
  # hard-coded path in case user defined CC=xxx for build which causes errors
  # see this FS https://bugs.archlinux.org/task/64315
  install -Dm644 arch/x86/boot/bzImage "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  echo "Installing modules..."
  #make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 modules_install
  # not needed since not building with CONFIG_DEBUG_INFO=y

  make LLVM=$_LLVM LLVM_IAS=$_LLVM INSTALL_MOD_PATH="$pkgdir/usr" modules_install

  # remove build and source links
  rm "$modulesdir"/{source,build}
}

_package-headers() {
  pkgdesc="Headers and scripts for building modules for ${pkgbase/linux/Linux} kernel"
  depends=("$pkgbase") # added to keep kernel and headers packages matched
  # groups=('tt-uksm')

  cd linux-${pkgver}
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts

  # add objtool for external module building and enabled VALIDATION_STACK option
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # add xfs and shmem for aufs building
  mkdir -p "$builddir"/{fs/xfs,mm}

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -bi "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  #echo "Stripping vmlinux..."
  #strip -v $STRIP_STATIC "$builddir/vmlinux"
  # not needed since not building with CONFIG_DEBUG_INFO=y

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"

}

pkgname=("$pkgbase" "$pkgbase-headers")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done

# vim:set ts=8 sts=2 sw=2 et:
