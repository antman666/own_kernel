# Maintainer:  AntMan666 <945360554@qq.com>
# Contributor: Kyle De'Vir (QuartzDragon) <kyle[dot]devir[at]mykolab[dot]com>
# Contributor: Jan Alexander Steffens (heftig) <heftig@archlinux.org>

### BUILD OPTIONS

# Set these variables to ANYTHING that is not null to enable them

# Tweak kernel options prior to a build via nconfig
_makenconfig=

# Optionally select a sub architecture by number if building in a clean chroot
# Leaving this entry blank will require user interaction during the build
# which will cause a failure to build if using makechrootpkg. Note that the
# generic (default) option is 30.
#
# Note - the march=native option is unavailable by this method, use the nconfig
# and manually select it.
#
#  1. AMD Opteron/Athlon64/Hammer/K8 (MK8)
#  2. AMD Opteron/Athlon64/Hammer/K8 with SSE3 (MK8SSE3)
#  3. AMD 61xx/7x50/PhenomX3/X4/II/K10 (MK10)
#  4. AMD Barcelona (MBARCELONA)
#  5. AMD Bobcat (MBOBCAT)
#  6. AMD Jaguar (MJAGUAR)
#  7. AMD Bulldozer (MBULLDOZER)
#  8. AMD Piledriver (MPILEDRIVER)
#  9. AMD Steamroller (MSTEAMROLLER)
#  10. AMD Excavator (MEXCAVATOR)
#  11. AMD Zen (MZEN)
#  12. AMD Zen 2 (MZEN2)
#  13. Intel P4 / older Netburst based Xeon (MPSC)
#  14. Intel Atom (MATOM)
#  15. Intel Core 2 (MCORE2)
#  16. Intel Nehalem (MNEHALEM)
#  17. Intel Westmere (MWESTMERE)
#  18. Intel Silvermont (MSILVERMONT)
#  19. Intel Goldmont (MGOLDMONT)
#  20. Intel Goldmont Plus (MGOLDMONTPLUS)
#  21. Intel Sandy Bridge (MSANDYBRIDGE)
#  22. Intel Ivy Bridge (MIVYBRIDGE)
#  23. Intel Haswell (MHASWELL)
#  24. Intel Broadwell (MBROADWELL)
#  25. Intel Skylake (MSKYLAKE)
#  26. Intel Skylake X (MSKYLAKEX)
#  27. Intel Cannon Lake (MCANNONLAKE)
#  28. Intel Ice Lake (MICELAKE)
#  29. Intel Cascade Lake (MCASCADELAKE)
#  30. Generic-x86-64 (GENERIC_CPU)
#  31. Native optimizations autodetected by GCC (MNATIVE)
_subarch=15

# Compile ONLY used modules to VASTLY reduce the number of modules built
# and the build time.
#
# To keep track of which modules are needed for your specific system/hardware,
# give module_db script a try: https://aur.archlinux.org/packages/modprobed-db
# This PKGBUILD read the database kept if it exists
#
# More at this wiki page ---> https://wiki.archlinux.org/index.php/Modprobed-db
_localmodcfg=

pkgbase=linux-pds-uksm
pkgver=5.14.15.arch1
pkgrel=1
pkgdesc="Linux kernel with pds scheduler and uksm patch"
_srcver_tag=v${pkgver%.*}-${pkgver##*.}
url="https://github.com/archlinux/linux/commits/$_srcver_tag"
arch=(x86_64)
license=(GPL2)
makedepends=(
    bc
    kmod
    libelf
    pahole
    cpio
    perl
    tar
    xz
    xmlto
    python-sphinx
    python-sphinx_rtd_theme
    graphviz
    imagemagick
    git
)
options=('!strip')

_reponame="linux-archlinux"
_repo_url="https://github.com/archlinux/linux.git"

_reponame_kernel_patch="kernel_compiler_patch"
_repo_url_kernel_patch="https://github.com/graysky2/${_reponame_kernel_patch}.git"
_kernel_patch_name="more-uarches-for-kernel-5.8-5.14.patch"

_pkgdesc_extra="~ featuring Alfred Chen's PDS CPU scheduler, rebased by TkG"

_url="https://gitlab.com/sirlucjan/kernel-patches/-/raw/master/5.14"

source=(
    "${_reponame}::git+${_repo_url}?signed#tag=$_srcver_tag"
    "git+${_repo_url_kernel_patch}"
    config # kernel config file
    0001-prjc_v5.14-r3.patch
    0002-glitched-pds.patch
	"0003-bbr2.patch::${_url}/bbr2-patches/0001-bbr2-5.14-introduce-BBRv2.patch"
	"0004-bfq.patch::${_url}/bfq-patches-v2/0001-bfq-patches.patch"
	"0005-block.patch::${_url}/block-patches-v2/0001-block-patches.patch"
	"0006-btrfs.patch::${_url}/btrfs-patches-v9/0001-btrfs-patches.patch"
	"0007-fix-miscellaneous.patch::${_url}/fixes-miscellaneous-v8/0001-fixes-miscellaneous.patch"
	"0008-futex.patch::${_url}/futex-xanmod-patches-v2/0001-futex-resync-from-gitlab.collabora.com.patch"
	"0009-futex2.patch::${_url}/futex2-xanmod-patches-v2/0001-futex2-resync-from-gitlab.collabora.com.patch"
	"0010-lru.patch::${_url}/lru-patches-v4/0001-lru-patches.patch"
	"0011-ntfs.patch::${_url}/ntfs3-patches-v14/0001-ntfs3-patches.patch"
	"0012-uksm.patch::${_url}/uksm-patches-v2/0001-UKSM-for-5.14.patch"
	"0013-zstd.patch::${_url}/zstd-upstream-patches-v7/0001-zstd-upstream-patches.patch"
	"0014-winesync.patch::https://raw.githubusercontent.com/ptr1337/kernel-patches/master/5.14/0001-winesync.patch"
)
validpgpkeys=(
    "ABAF11C65A2970B130ABE3C479BE3E4300411886"  # Linus Torvalds
    "647F28654894E3BD457199BE38DBBDC86092693E"  # Greg Kroah-Hartman
    "A2FF3A36AAA56654109064AB19802F8B0D70FC30"  # Jan Alexander Steffens (heftig)
    "C7E7849466FE2358343588377258734B41C31549"  # David Runge <dvzrv@archlinux.org>
)
sha512sums=('SKIP'
            'SKIP'
            'd3a226f0dda3df74fbebaa286c6b314131a57c059b1065441c450131d5f14fab797b4c5f6866bd41da1f715b199a23a2d7f3a6e4cc1c3f6c58d83474babbf719'
            '9719b022a1798a7909cd7160917816c40310eb42fa4144f7b122dd57950c1088f2ab6fb9202f30591d7b793c6634a7b97e77af2e192043b95ae44751451af7cc'
            '889f0a49f326de3f119290256393b09a9e9241c2a297ca0b7967a2884e4e35d71388d2a559e4c206f55f67228b65e8f2013a1ec61f6ff8f1de3b6a725fd5fa57'
            '37beeb799edc0ce9f3cae1307cc5237761b9c2c9ef0bda099f5009e429976b6a2d3a0e9cc9b8ee58298f29a86417d6823fe99fae9257f4c35c4b8450a0f46d1c'
            '4f72d42f1ac5b03cc7cbb693cd86ccdb8ee3bb31ca317b2227e35558ac96e1d23123b6f6142ea712005fc577e7a8bb92f0856d4380941f47352b0a0ebca4ebc7'
            '18041300840a8f84843ce04a279a91496d98d5409874abf4903cc764f071855cd81675c6a1bf17b9a17b962811f9120600fb63c56a8aa06c8cad5ca8ef4927d3'
            '82a263883afe47a7cda2a14443600bb638c2e011eb03d0d6563b8dfa1dd5681d9bac64e50c957c8edcc77f45f6be4fb0995ec938be3612b9469db8a5b7f773ad'
            '126899335151d56891a150e3792ab09458e7765b1c4bcaa4966e092baa2558fb873f0bafc2d83a313d034ac904582b074a22178c44232ddabddf4dd504961db2'
            '649270a42641adbdc8b1faa326cabfd888a99db7eacb871868d2e5baf371c53a08e5979f157340ed8459b68d6eaeeff10aca2fb0c5a8f6afa1e4659f9baf92cf'
            '5cc6667516a1eaffcad6923c1c8acabe23545b432a8808e2396834a043247972a441c373ce7036a45994d4834235ca16c02ad5f0b475d08312ee9963bf28a89e'
            '07dd908f5edd9510316538afa571c2c52e61e401f2f2244885c75094b270e04f3be827f34817bdb9653e7f626f93b39524ab6e6a252863a64aebe7aefe2a3d2c'
            '52d83863299272e0c121b37eccccd0b1804a95e9a64e6ffa39dfd9554da7e3a0af3fe53932942673dd672076162eb6f7d1c18bb5a7e8d4e07bba31498f075f3e'
            '966bac05a1f495cea22b494f7c98adcca56b0e0c1971c8627efe97504c3eba980d2874b15a57503ecaac6481bcc504ab859e0b8489ff9fe8e3d87049fd915d36'
            'cee089d89134e5fb8d6a76fac98638ba1bc0cd1070774daf12049f6aa9b1066bd899e1a821dbc75bd6c2b43990c35432e6c354045e0f5128866e46a123c63a6c')

export KBUILD_BUILD_HOST=archlinux
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

prepare() {
    cd "$srcdir/$_reponame"

    msg2 "Setting version..."
    scripts/setlocalversion --save-scmversion
    echo "-$pkgrel" > localversion.10-pkgrel
    echo "${pkgbase#linux}" > localversion.20-pkgname

	local src
	for src in "${source[@]}"; do
		src="${src%%::*}"
		src="${src##*/}"
		[[ $src = 0*.patch ]] || continue
		msg2 "Applying patch $src..."
		patch -Np1 < "../$src"
    done

    msg2 "Applying more-uarches-20210914..."
	patch -Np1 < "../${_reponame_kernel_patch}/${_kernel_patch_name}"

    msg2 "Setting config..."
    cp ../config .config

    msg2 "Enable Fsync support"
    scripts/config --enable CONFIG_FUTEX
    scripts/config --enable CONFIG_FUTEX_PI

	msg2 "Enable Futex2 support"
	scripts/config --enable CONFIG_FUTEX2
	
	msg2 "Disabling TCP_CONG_CUBIC..."
	scripts/config --module CONFIG_TCP_CONG_CUBIC
	scripts/config --disable CONFIG_DEFAULT_CUBIC

	msg2 "Enabling TCP_CONG_BBR2..."
    scripts/config --enable CONFIG_TCP_CONG_BBR2
    scripts/config --enable CONFIG_DEFAULT_BBR2
    scripts/config --set-str CONFIG_DEFAULT_TCP_CONG bbr2

    msg2 "Disabling NUMA from kernel config..."
    scripts/config --disable CONFIG_NUMA

    msg2 "Set module compression to ZSTD..."
    scripts/config --enable CONFIG_MODULE_COMPRESS
    scripts/config --disable CONFIG_MODULE_COMPRESS_NONE
    scripts/config --disable CONFIG_MODULE_COMPRESS_XZ
    scripts/config --enable CONFIG_MODULE_COMPRESS_ZSTD
    scripts/config --enable CONFIG_MODULE_COMPRESS_ZSTD_ULTRA

    msg2 "Enable zram compression to ZSTD..."
    # scripts/config --disable CONFIG_ZRAM_DEF_COMP_LZORLE
    # scripts/config --enable CONFIG_ZRAM_DEF_COMP_ZSTD
    # scripts/config --set-str CONFIG_ZRAM_DEF_COMP zstd

    scripts/config --enable CONFIG_ZSWAP_COMPRESSOR_DEFAULT_LZ4
    scripts/config --disable CONFIG_ZSWAP_COMPRESSOR_DEFAULT_ZSTD
    scripts/config --set-str CONFIG_ZSWAP_COMPRESSOR_DEFAULT lz4

    msg2 "Enabling multigenerational LRU..."
    scripts/config --enable CONFIG_HAVE_ARCH_PARENT_PMD_YOUNG
    scripts/config --enable CONFIG_LRU_GEN
    scripts/config --set-val CONFIG_NR_LRU_GENS 7
    scripts/config --set-val CONFIG_TIERS_PER_GEN 4
    scripts/config --enable CONFIG_LRU_GEN_ENABLED
    scripts/config --disable CONFIG_LRU_GEN_STATS

	msg2 "Disabling MQ-Deadline I/O scheduler..."
    scripts/config --disable CONFIG_MQ_IOSCHED_DEADLINE
	msg2 "Disabling Kyber I/O scheduler..."
    scripts/config --disable CONFIG_MQ_IOSCHED_KYBER
	msg2 "Enable winesync support"
    scripts/config --module CONFIG_WINESYNC

    if [ -n "$_subarch" ]; then
        yes "$_subarch" | make oldconfig
    else
        make prepare
    fi

    ### Optionally load needed modules for the make localmodconfig
    # See https://aur.archlinux.org/packages/modprobed-db
    if [ -n "$_localmodcfg" ]; then
        if [ -f $HOME/.config/modprobed.db ]; then
            msg2 "Running Steven Rostedt's make localmodconfig now"
            make LSMOD=$HOME/.config/modprobed.db localmodconfig
        else
            msg2 "No modprobed.db data found"
            exit
        fi
    fi

    # Set yield_type to 0
    sed -i -e 's/int sched_yield_type __read_mostly = 1;/int sched_yield_type __read_mostly = 0;/' ./kernel/sched/alt_core.c

    # do not run 'make olddefconfig' as it sets default options
    yes "" | make config >/dev/null
    
    msg2 "Showing config diff"
    diff -u ../config .config || :

    make -s kernelrelease > version
    msg2 "Prepared $pkgbase version $(<version)"

    [[ -z "$_makenconfig" ]] || make nconfig

    # save configuration for later reuse
    cat .config > "$startdir/config.last"
}

build() {
    cd $_reponame
    make all
}

_package() {
    pkgdesc="The $pkgdesc kernel and modules $_pkgdesc_extra"
    depends=(
        coreutils
        kmod
        initramfs
        linux-firmware
        thrash-protect
    )
    optdepends=(
        "crda: to set the correct wireless channels of your country"
    )
    provides=(
        VIRTUALBOX-GUEST-MODULES
        WIREGUARD-MODULE
    )
    replaces=(
        virtualbox-guest-modules-arch
        wireguard-arch
    )

    cd $_reponame
    local kernver="$(<version)"
    local modulesdir="$pkgdir/usr/lib/modules/$kernver"

    msg2 "Installing boot image..."
    # systemd expects to find the kernel here to allow hibernation
    # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
    install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"

    # Used by mkinitcpio to name the kernel
    echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

    msg2 "Installing modules..."
    make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 modules_install

    # remove build and source links
    rm "$modulesdir"/{source,build}
}

_package-headers() {
    pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel $_pkgdesc_extra"
    depends=(pahole)

    cd $_reponame
    local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

    msg2 "Installing build files..."
    install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
        localversion.* version vmlinux
    install -Dt "$builddir/kernel" -m644 kernel/Makefile
    install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
    cp -t "$builddir" -a scripts

    # add objtool for external module building and enabled VALIDATION_STACK option
    install -Dt "$builddir/tools/objtool" tools/objtool/objtool

    # add xfs and shmem for aufs building
    mkdir -p "$builddir"/{fs/xfs,mm}

    msg2 "Installing headers..."
    cp -t "$builddir" -a include
    cp -t "$builddir/arch/x86" -a arch/x86/include
    install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

    install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
    install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

    # https://bugs.archlinux.org/task/13146
    install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

    # https://bugs.archlinux.org/task/20402
    install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
    install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
    install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

    # https://bugs.archlinux.org/task/71392
    install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

    msg2 "Installing KConfig files..."
    find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

    msg2 "Removing unneeded architectures..."
    local arch
    for arch in "$builddir"/arch/*/; do
        [[ $arch = */x86/ ]] && continue
        echo "Removing $(basename "$arch")"
        rm -r "$arch"
    done

    msg2 "Removing documentation..."
    rm -r "$builddir/Documentation"

    msg2 "Removing broken symlinks..."
    find -L "$builddir" -type l -printf 'Removing %P\n' -delete

    msg2 "Removing loose objects..."
    find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

    msg2 "Stripping build tools..."
    local file
    while read -rd '' file; do
        case "$(file -bi "$file")" in
            application/x-sharedlib\;*)      # Libraries (.so)
                strip -v $STRIP_SHARED "$file" ;;
            application/x-archive\;*)        # Libraries (.a)
                strip -v $STRIP_STATIC "$file" ;;
            application/x-executable\;*)     # Binaries
                strip -v $STRIP_BINARIES "$file" ;;
            application/x-pie-executable\;*) # Relocatable binaries
                strip -v $STRIP_SHARED "$file" ;;
        esac
    done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

    echo "Stripping vmlinux..."
    strip -v $STRIP_STATIC "$builddir/vmlinux"

    msg2 "Adding symlink..."
    mkdir -p "$pkgdir/usr/src"
    ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

_package-docs() {
    pkgdesc="Documentation for the $pkgdesc kernel $_pkgdesc_extra"

    cd $_srcname
    local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

    msg2 "Installing documentation..."
    local src dst
    while read -rd '' src; do
        dst="${src#Documentation/}"
        dst="$builddir/Documentation/${dst#output/}"
        install -Dm644 "$src" "$dst"
    done < <(find Documentation -name '.*' -prune -o ! -type d -print0)

    msg2 "Adding symlink..."
    mkdir -p "$pkgdir/usr/share/doc"
    ln -sr "$builddir/Documentation" "$pkgdir/usr/share/doc/$pkgbase"
}

pkgname=(
    "$pkgbase"
    "$pkgbase-headers"
    "$pkgbase-docs"
)
for _p in "${pkgname[@]}"; do
    eval "package_$_p() {
        $(declare -f "_package${_p#$pkgbase}")
        _package${_p#$pkgbase}
    }"
done

