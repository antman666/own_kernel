# Maintainer: AntMan666 <945360554@qq.com>
# Contributor: Jan Alexander Steffens (heftig) <jan.steffens@gmail.com>
# Contributor: graysky <graysky AT archlinux DOT us>

### BUILD OPTIONS
# Set the next two variables to ANYTHING that is not null to enable them

# Tweak kernel options prior to a build via nconfig
_makenconfig=

# Only compile select modules to reduce the number of modules built
#
# To keep track of which modules are needed for your specific system/hardware,
# give module_db a try: https://aur.archlinux.org/packages/modprobed-db
# This PKGBUILD reads the database kept if it exists
# More at this wiki page ---> https://wiki.archlinux.org/index.php/Modprobed-db
_localmodcfg=

# Choose between GCC and CLANG config (default is GCC)
if [ -z ${_compiler+x} ]; then
  _compiler=clang
  _use_llvm_lto=full
fi

# Running with a 1000HZ, 750Hz, 625Hz, 600 Hz, 500Hz, 300Hz, 250Hz and 100Hz tick rate
_HZ_ticks=500

# Choose between perodic, idle or full
# Full tickless can give higher performances in various cases but, depending on hardware, lower consistency.
_tickrate=${_tickrate-full}

# Choose between full(low-latency), voluntary or server
_preempt=${_preempt-full}

# Enable TCP_CONG_BBR3
_tcp_bbr3=${_tcp_bbr3-y}

# Transparent Hugepages
# 'always' - always enable THP
# 'madvise' - madvise, prevent applications from allocating more memory resources than necessary
_hugepage=${_hugepage-always}

# Optionally select a sub architecture by number or leave blank which will
# require user interaction during the build. Note that the generic (default)
# option is 39.
_subarch=36

#  1. AMD Opteron/Athlon64/Hammer/K8 (MK8)
#  2. AMD Opteron/Athlon64/Hammer/K8 with SSE3 (MK8SSE3) (NEW)
#  3. AMD 61xx/7x50/PhenomX3/X4/II/K10 (MK10) (NEW)
#  4. AMD Barcelona (MBARCELONA) (NEW)
#  5. AMD Bobcat (MBOBCAT) (NEW)
#  6. AMD Jaguar (MJAGUAR) (NEW)
#  7. AMD Bulldozer (MBULLDOZER) (NEW)
#  8. AMD Piledriver (MPILEDRIVER) (NEW)
#  9. AMD Steamroller (MSTEAMROLLER) (NEW)
#  10. AMD Excavator (MEXCAVATOR) (NEW)
#  11. AMD Zen (MZEN) (NEW)
#  12. AMD Zen 2 (MZEN2) (NEW)
#  13. AMD Zen 3 (MZEN3) (NEW)
#  14. AMD Zen 4 (MZEN4) (NEW)
#  15. Intel P4 / older Netburst based Xeon (MPSC)
#  16. Intel Core 2 (MCORE2)
#  17. Intel Atom (MATOM)
#  18. Intel Nehalem (MNEHALEM) (NEW)
#  19. Intel Westmere (MWESTMERE) (NEW)
#  20. Intel Silvermont (MSILVERMONT) (NEW)
#  21. Intel Goldmont (MGOLDMONT) (NEW)
#  22. Intel Goldmont Plus (MGOLDMONTPLUS) (NEW)
#  23. Intel Sandy Bridge (MSANDYBRIDGE) (NEW)
#  24. Intel Ivy Bridge (MIVYBRIDGE) (NEW)
#  25. Intel Haswell (MHASWELL) (NEW)
#  26. Intel Broadwell (MBROADWELL) (NEW)
#  27. Intel Skylake (MSKYLAKE) (NEW)
#  28. Intel Skylake X (MSKYLAKEX) (NEW)
#  29. Intel Cannon Lake (MCANNONLAKE) (NEW)
#  30. Intel Ice Lake (MICELAKE) (NEW)
#  31. Intel Cascade Lake (MCASCADELAKE) (NEW)
#  32. Intel Cooper Lake (MCOOPERLAKE) (NEW)
#  33. Intel Tiger Lake (MTIGERLAKE) (NEW)
#  34. Intel Sapphire Rapids (MSAPPHIRERAPIDS) (NEW)
#  35. Intel Rocket Lake (MROCKETLAKE) (NEW)
#  36. Intel Alder Lake (MALDERLAKE) (NEW)
#  37. Intel Raptor Lake (MRAPTORLAKE) (NEW)
#  38. Intel Meteor Lake (MMETEORLAKE) (NEW)
#  39. Generic-x86-64 (GENERIC_CPU)
#  40. Generic-x86-64-v2 (GENERIC_CPU2) (NEW)
#  41. Generic-x86-64-v3 (GENERIC_CPU3) (NEW)
#  42. Generic-x86-64-v4 (GENERIC_CPU4) (NEW)
#  43. Intel-Native optimizations autodetected by the compiler (MNATIVE_INTEL) (NEW)
#  44. AMD-Native optimizations autodetected by the compiler (MNATIVE_AMD) (NEW)

### IMPORTANT: Do no edit below this line unless you know what you're doing
pkgbase=linux-cus-mini
pkgver=6.11
pkgrel=2.1
pkgdesc='Linux scx scheduler Kernel with other patches and improvements'
arch=(x86_64)
url="https://github.com/sched-ext/scx"
license=(GPL2)
makedepends=(
  'bc' 'libelf' 'pahole' 'cpio' 'perl' 'tar' 'xz' 'zstd' 'gcc' 'gcc-libs' 'glibc' 'binutils' 'make' 'patch' 'python'
)
if [ "${_compiler}" = "clang" ]; then
  makedepends+=(clang llvm lld python polly openmp)
  BUILD_FLAGS=(
    CC=clang
    LD=ld.lld
    LLVM=1
    LLVM_IAS=1
  )
fi
options=('!strip' '!debug')

_gcc_more_v=20240919
_patchsource="https://raw.githubusercontent.com/CachyOS/kernel-patches/master/6.11"
_patchsources="https://raw.githubusercontent.com/sirlucjan/kernel-patches/master/6.11"
_xanmodpatch="https://raw.githubusercontent.com/xanmod/linux-patches/master/linux-6.11.y-xanmod"

source=(
  "https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-$pkgver.tar".{xz,sign}
  config         # the main kernel config file
  open_O3_clang.patch
  "more-uarches-$_gcc_more_v.tar.gz::https://github.com/graysky2/kernel_compiler_patch/archive/$_gcc_more_v.tar.gz"
  # "${_patchsource}/sched/0001-prjc.patch"
  "${_patchsource}/sched/0001-sched-ext.patch"
  "${_patchsource}/0002-bbr3.patch"
  "${_patchsource}/0005-fixes.patch"
  "${_patchsource}/0007-ksm.patch"
  "${_patchsource}/0008-ntsync.patch"
  "${_xanmodpatch}/net/tcp/cloudflare/0001-tcp-Add-a-sysctl-to-skip-tcp-collapse-processing-whe.patch"
  "${_xanmodpatch}/clearlinux/0003-locking-rwsem-spin-faster.patch"
  "${_xanmodpatch}/clearlinux/0004-drivers-initialize-ata-before-graphics.patch"
  "${_xanmodpatch}/xanmod/0009-XANMOD-block-Set-rq_affinity-to-force-complete-I-O-r.patch"
  "${_xanmodpatch}/xanmod/0011-XANMOD-kconfig-add-500Hz-timer-interrupt-kernel-conf.patch"
  "${_xanmodpatch}/xanmod/0018-XANMOD-scripts-setlocalversion-remove-tag-for-git-re.patch"
  "${_xanmodpatch}/xanmod/0019-XANMOD-scripts-setlocalversion-Move-localversion-fil.patch"
  "${_xanmodpatch}/zen/0002-ZEN-dm-crypt-Disable-workqueues-for-crypto-ops.patch"
)

validpgpkeys=(
  'ABAF11C65A2970B130ABE3C479BE3E4300411886'  # Linus Torvalds
  '647F28654894E3BD457199BE38DBBDC86092693E'  # Greg Kroah-Hartman
  '83BC8889351B5DEBBB68416EB8AC08600F108CDF'  # Jan Alexander Steffens (heftig)
)

b2sums=('e7750c0878d71a56a0ce52d4c4c912199dad5bf5e2e8f872585a6494afbb37cbd852e612a6858936d2dc9b7776a3933818f540db408d57e90d18ea5249bba7ab'
        'SKIP'
        '7d0a578032474511609c13878d3d663bd1b69ec48a5b18fb1ba22087e122ed21ab1f68eb834b4145205bf64deb332c47b11313d1d6d152eceb65302822317de8'
        'e7e3f578877cea350a454278841154ca69312a1087960533ce7f521d23f98a6a2cf486d55ce3a4903cf451de654db5779c2011ba9fd4d3445730c5e8ef109950'
        '1ed7206886ecf72ec0801e62e56bc5af5ea90622965974bb1f95e2cc4e6ffb2a5bbaeaa934afbc319a08dcabb5c31c8324002a859a28a8776701da37f6f7dfd3'
        '1bbc88eea44be9cb2ec2b43cf4100154702a2ea3a0274f080a273304263ca8a8e85b7bd0d124a49dd7ea1ae71d28932a4d57789dcc589e2e3d3adc3e3e20e1d8'
        '115251e00c44956612ac25f9f4a0238c65ecd6374dc0ea15244f388f6600883fd43bdd00cc958fa570d89044bdc383f5d10c2b24d7200bed96fc3046437d2ffc'
        'c1ed637fc007a3d2d535312ff47b75fbd1615d97c9917f5604db34cd1b85cc1b8770b9ae8ba7b676df1bd54f2fe021abaaacbc62b230764971d0d0e9e4e2c63d'
        '9f96b18b1e1836314cf5a4d641fecb8130732efd4ad100843d92a7e28875ad8c262cd09db98b4d14d670376e06135d699c7f064912b7a1aa47061af9f8e1c3de'
        '994c466799c14ac64ce1cb66496587dd3dc00913cd96b1a0a7c4a83d945f091fc736eac8e0a726eb95454c674c82703b7a29d3587064cf051bbef0b804b271cc'
        'fd8ed8b65d7659846359f4f06152cb785c8c65a113a0106b34d494aab09d433f1bc02b8ffe6ec74a701269ea87b189b80fc5bd105da842ab1992241aa6736685'
        '88fcfb6cea77c2967ff56bd8cc9b05c8476bd0687ac60c0897c2f2ae85b1d61a72403523b7268d60e1cd8d33af12f93388878994ff788f7a6114d18e8dbd86e5'
        'bc35b76a0cec1f7aa0f1337c8b356187875df45889e3913c1d1d1e7f3528315505dca37323f683a0d565f379d6e62feb333242b8ad4eb3efeedbd9a90bbb3aba'
        '94148d4f200d0e69bfdb050a7ce997a29c888d925e4bdf7ae2e1a781b44e7dd9fa5f220ccc336e9370e39e4aac163698567a0eeea713763293cde48f319310be'
        '413a647d2ab22707269a70985d2afeb764812be42ff107d20aea23e4025164754a9463a66de772e429d279942aa66db558761f291ba6dd96d0b2e4f52bae6ccd'
        '3887dfda18ec5812d48268a4834613d05a81f1d09d627c11dfd418e52a58d6734bc8774cdfaffe66865fd8ae2285de305b75896051d234d1103f04d955047184'
        '8d691bceb6dcfd7829f985c9234eba06c212835e087ca9566f4ce54596028b35c3fbb8df376da91823b4d791457ce1d8134814ccab302466ee487871ccae82c6'
        '09f5eb209bbaa5c958fb948c88e8061eaab2484a3a1dd4eac654c3d4e71ebf9572e3d409e7ab02f9b0667de7cea77c4f32d15e9382b1273f9e11b905b8dd4ff8')

export KBUILD_BUILD_HOST=archlinux
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

prepare() {
  cd linux-${pkgver}

  msg2 "Setting version..."
  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux}" > localversion.20-pkgname

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    msg2 "Applying patch $src..."
    patch -Np1 < "../$src"
  done

  msg2 "Setting config..."
  cp ../config .config

  msg2 "Setting for LTO"
  case "$_use_llvm_lto" in
    thin)
      scripts/config -e LTO \
                     -e LTO_CLANG \
                     -e ARCH_SUPPORTS_LTO_CLANG \
                     -e ARCH_SUPPORTS_LTO_CLANG_THIN \
                     -d LTO_NONE \
                     -e HAS_LTO_CLANG \
                     -d LTO_CLANG_FULL \
                     -e LTO_CLANG_THIN \
                     -e HAVE_GCC_PLUGINS;;
    full)
      scripts/config -e LTO \
                     -e LTO_CLANG \
                     -e ARCH_SUPPORTS_LTO_CLANG \
                     -e ARCH_SUPPORTS_LTO_CLANG_THIN \
                     -d LTO_NONE \
                     -e HAS_LTO_CLANG \
                     -e LTO_CLANG_FULL \
                     -d LTO_CLANG_THIN \
                     -e HAVE_GCC_PLUGINS;;
    none)
      scripts/config -e LTO_NONE;;
  esac

  case "$_HZ_ticks" in
    100|250|500|600|625|750|1000)
      scripts/config \
        -d HZ_300 \
        -e "HZ_${_HZ_ticks}" \
        --set-val HZ "${_HZ_ticks}";;
    300)
      scripts/config \
        -e HZ_300 \
        --set-val HZ 300;;
  esac

  case "$_tickrate" in
    perodic)
      scripts/config -d NO_HZ_IDLE \
                     -d NO_HZ_FULL \
                     -d NO_HZ \
                     -d NO_HZ_COMMON \
                     -e HZ_PERIODIC;;
    idle)
      scripts/config -d HZ_PERIODIC \
                     -d NO_HZ_FULL \
                     -e NO_HZ_IDLE \
                     -e NO_HZ \
                     -e NO_HZ_COMMON;;
    full)
      scripts/config -d HZ_PERIODIC \
                     -d NO_HZ_IDLE \
                     -d CONTEXT_TRACKING_FORCE \
                     -e NO_HZ_FULL_NODEF \
                     -e NO_HZ_FULL \
                     -e NO_HZ \
                     -e NO_HZ_COMMON \
                     -e CONTEXT_TRACKING;;
  esac

  case "$_preempt" in
    full)
      scripts/config -e PREEMPT_BUILD \
                     -d PREEMPT_NONE \
                     -d PREEMPT_VOLUNTARY \
                     -e PREEMPT \
                     -e PREEMPT_COUNT \
                     -e PREEMPTION \
                     -e PREEMPT_DYNAMIC;;
    voluntary)
      scripts/config -e PREEMPT_BUILD \
                     -d PREEMPT_NONE \
                     -e PREEMPT_VOLUNTARY \
                     -d PREEMPT \
                     -e PREEMPT_COUNT \
                     -e PREEMPTION \
                     -d PREEMPT_DYNAMIC;;
    server)
      scripts/config -e PREEMPT_NONE_BUILD \
                     -e PREEMPT_NONE \
                     -d PREEMPT_VOLUNTARY \
                     -d PREEMPT \
                     -d PREEMPTION \
                     -d PREEMPT_DYNAMIC;;
  esac

  msg2 "Enabling KBUILD_CFLAGS -O3..."
  scripts/config -d CC_OPTIMIZE_FOR_PERFORMANCE \
                 -e CC_OPTIMIZE_FOR_PERFORMANCE_O3

  msg2 "Disabling TCP_CONG_CUBIC..."
  scripts/config -m TCP_CONG_CUBIC \
                 -d DEFAULT_CUBIC \
                 -e TCP_CONG_BBR \
                 -e DEFAULT_BBR \
                 --set-str DEFAULT_TCP_CONG bbr

  case "$_hugepage" in
    always)
      scripts/config -d TRANSPARENT_HUGEPAGE_MADVISE \
                     -e TRANSPARENT_HUGEPAGE_ALWAYS;;
    madvise)
      scripts/config -d TRANSPARENT_HUGEPAGE_ALWAYS \
                     -e TRANSPARENT_HUGEPAGE_MADVISE;;
  esac

  msg2 "Enable USER_NS_UNPRIVILEGED"
  scripts/config -e USER_NS

  make ${BUILD_FLAGS[*]} olddefconfig
  diff -u ../config .config || :

  # https://github.com/graysky2/kernel_gcc_patch
  # make sure to apply after olddefconfig to allow the next section
  msg2 "Patching to enable GCC optimization for other uarchs..."
  patch -Np1 -i "$srcdir/kernel_compiler_patch-$_gcc_more_v/more-ISA-levels-and-uarches-for-kernel-6.8-rc4+.patch"

  if [ -n "$_subarch" ]; then
    # user wants a subarch so apply choice defined above interactively via 'yes'
    yes "$_subarch" | make ${BUILD_FLAGS[*]} oldconfig
  else
    # no subarch defined so allow user to pick one
    make ${BUILD_FLAGS[*]} oldconfig
  fi

  ### Optionally load needed modules for the make localmodconfig
  # See https://aur.archlinux.org/packages/modprobed-db
  if [ -n "$_localmodcfg" ]; then
    if [ -f $HOME/.config/modprobed.db ]; then
      msg2 "Running Steven Rostedt's make localmodconfig now"
      make ${BUILD_FLAGS[*]} LSMOD=$HOME/.config/modprobed.db localmodconfig
    else
      msg2 "No modprobed.db data found"
      exit
    fi
  fi

  make -s kernelrelease > version
  msg2 "Prepared $pkgbase version $(<version)"

  [[ -z "$_makenconfig" ]] || make ${BUILD_FLAGS[*]} nconfig

  # save configuration for later reuse
  cat .config > "${startdir}/config.last"
}

build() {
  cd linux-${pkgver}
  msg2 "Build all"
  make ${BUILD_FLAGS[*]} all
  msg2 "Build bpf"
  make -C tools/bpf/bpftool vmlinux.h feature-clang-bpf-co-re=1
}

_package() {
  pkgdesc="The ${pkgbase/linux/Linux} kernel and modules with EEVDF CPU scheduler by Mainline and with some other patches"
  depends=(
    coreutils
    kmod
    initramfs
  )
  optdepends=(
    'wireless-regdb: to set the correct wireless channels of your country'
    'linux-firmware: firmware images needed for some devices'
  )
  provides=(
    KSMBD-MODULE
    VIRTUALBOX-GUEST-MODULES
    WIREGUARD-MODULE
  )
  # groups=('tt-uksm')

  cd linux-${pkgver}

  local kernver="$(<version)"
  local modulesdir="$pkgdir/usr/lib/modules/$(<version)"

  msg2 "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  #install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"
  #
  # hard-coded path in case user defined CC=xxx for build which causes errors
  # see this FS https://bugs.archlinux.org/task/64315
  install -Dm644 arch/x86/boot/bzImage "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  msg2 "Installing modules..."
  #make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 modules_install
  # not needed since not building with CONFIG_DEBUG_INFO=y

  make LLVM=$_LLVM LLVM_IAS=$_LLVM INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
    DEPMOD=/doesnt/exist modules_install

  # remove build link
  rm "$modulesdir"/build
}

_package-headers() {
  pkgdesc="Headers and scripts for building modules for ${pkgbase/linux/Linux} kernel"
  depends=(pahole "$pkgbase") # added to keep kernel and headers packages matched
  # groups=('tt-uksm')

  cd linux-${pkgver}
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  msg2 "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts

  # required when STACK_VALIDATION is enabled
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # required when DEBUG_INFO_BTF_MODULES is enabled
  # install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids

  msg2 "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  msg2 "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  msg2 "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  msg2 "Removing documentation..."
  rm -r "$builddir/Documentation"

  msg2 "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  msg2 "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  msg2 "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -bi "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  msg2 "Stripping vmlinux..."
  strip -v $STRIP_STATIC "$builddir/vmlinux"

  msg2 "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"

}

pkgname=("$pkgbase" "$pkgbase-headers")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done

# vim:set ts=8 sts=2 sw=2 et:
