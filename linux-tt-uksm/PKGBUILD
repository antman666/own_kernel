# Maintainer: AntMan666 <945360554@qq.com>
# Contributor: Jan Alexander Steffens (heftig) <jan.steffens@gmail.com>
# Contributor: graysky <graysky AT archlinux DOT us>

### BUILD OPTIONS
# Set the next two variables to ANYTHING that is not null to enable them

# Tweak kernel options prior to a build via nconfig
_makenconfig=

# Only compile select modules to reduce the number of modules built
#
# To keep track of which modules are needed for your specific system/hardware,
# give module_db a try: https://aur.archlinux.org/packages/modprobed-db
# This PKGBUILD reads the database kept if it exists
# More at this wiki page ---> https://wiki.archlinux.org/index.php/Modprobed-db
_localmodcfg=

## Choose between GCC and CLANG config (default is GCC)
if [ -z ${_compiler+x} ]; then
  _compiler=gcc
fi

#  417 Hz is the TT alternative to 300 Hz. Choose 417 Hz
# if you prefer performance over latency.
_417_HZ_ticks=

# 833 Hz is the TT alternative to 1000 Hz. Choose 833 Hz
#  if you want a balance between latency and performance.
_833_HZ_ticks=

# ck recommends 1000 Hz tick and the hrtimer patches in lieu of ck1
_1000_HZ_ticks=y
 
# 1666 Hz is for very high latency bound systems. Choose 1666 Hz
# if you don't care about overall throughput or performance, but
# you care more about latency (some realtime applications) require
# low latency. The response and interactive processes with 1666 Hz
# feel much snappier.
_1666_HZ_ticks=

# Optionally select a sub architecture by number or leave blank which will
# require user interaction during the build. Note that the generic (default)
# option is 36.
#
#  1. AMD Opteron/Athlon64/Hammer/K8 (MK8)
#  2. AMD Opteron/Athlon64/Hammer/K8 with SSE3 (MK8SSE3) (NEW)
#  3. AMD 61xx/7x50/PhenomX3/X4/II/K10 (MK10) (NEW)
#  4. AMD Barcelona (MBARCELONA) (NEW)
#  5. AMD Bobcat (MBOBCAT) (NEW)
#  6. AMD Jaguar (MJAGUAR) (NEW)
#  7. AMD Bulldozer (MBULLDOZER) (NEW)
#  8. AMD Piledriver (MPILEDRIVER) (NEW)
#  9. AMD Steamroller (MSTEAMROLLER) (NEW)
#  10. AMD Excavator (MEXCAVATOR) (NEW)
#  11. AMD Zen (MZEN) (NEW)
#  12. AMD Zen 2 (MZEN2) (NEW)
#  13. AMD Zen 3 (MZEN3) (NEW)
#  14. Intel P4 / older Netburst based Xeon (MPSC)
#  15. Intel Core 2 (MCORE2)
#  16. Intel Atom (MATOM)
#  17. Intel Nehalem (MNEHALEM) (NEW)
#  18. Intel Westmere (MWESTMERE) (NEW)
#  19. Intel Silvermont (MSILVERMONT) (NEW)
#  20. Intel Goldmont (MGOLDMONT) (NEW)
#  21. Intel Goldmont Plus (MGOLDMONTPLUS) (NEW)
#  22. Intel Sandy Bridge (MSANDYBRIDGE) (NEW)
#  23. Intel Ivy Bridge (MIVYBRIDGE) (NEW)
#  24. Intel Haswell (MHASWELL) (NEW)
#  25. Intel Broadwell (MBROADWELL) (NEW)
#  26. Intel Skylake (MSKYLAKE) (NEW)
#  27. Intel Skylake X (MSKYLAKEX) (NEW)
#  28. Intel Cannon Lake (MCANNONLAKE) (NEW)
#  29. Intel Ice Lake (MICELAKE) (NEW)
#  30. Intel Cascade Lake (MCASCADELAKE) (NEW)
#  31. Intel Cooper Lake (MCOOPERLAKE) (NEW)
#  32. Intel Tiger Lake (MTIGERLAKE) (NEW)
#  33. Intel Sapphire Rapids (MSAPPHIRERAPIDS) (NEW)
#  34. Intel Rocket Lake (MROCKETLAKE) (NEW)
#  35. Intel Alder Lake (MALDERLAKE) (NEW)
#  36. Generic-x86-64 (GENERIC_CPU)
#  37. Generic-x86-64-v2 (GENERIC_CPU2) (NEW)
#  38. Generic-x86-64-v3 (GENERIC_CPU3) (NEW)
#  39. Generic-x86-64-v4 (GENERIC_CPU4) (NEW)
#  40. Intel-Native optimizations autodetected by GCC (MNATIVE_INTEL) (NEW)
#  41. AMD-Native optimizations autodetected by GCC (MNATIVE_AMD) (NEW)
_subarch=15

### IMPORTANT: Do no edit below this line unless you know what you're doing
pkgbase=linux-tt-uksm
pkgver=5.17
pkgrel=1
arch=(x86_64)
url="https://github.com/hamadmarri/TT-CPU-Scheduler"
license=(GPL2)
makedepends=(
  bc kmod libelf cpio perl tar xz
)
if [ "${_compiler}" = "clang" ]; then
  makedepends+=(clang llvm lld python)
  _LLVM=1
fi
options=('!strip')

# https://ck-hack.blogspot.com/2021/08/514-and-future-of-muqss-and-ck-once.html
# thankfully xanmod keeps the hrtimer patches up to date
_commit=c8fd0bce08e6219df068e717c53aa08a7fbb496d
_xan=linux-5.15.y-xanmod
_gcc_more_v=20220315
_patchsource="https://gitlab.com/sirlucjan/kernel-patches/-/raw/master/5.17"
_patchsources="https://raw.githubusercontent.com/ptr1337/kernel-patches/master/5.17"

source=(
  "https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-$pkgver.tar".{xz,sign}
  config         # the main kernel config file
  "more-uarches-$_gcc_more_v.tar.gz::https://github.com/graysky2/kernel_compiler_patch/archive/$_gcc_more_v.tar.gz"
  # "xanmod-patches-from-ck-$_commit.tar.gz::https://github.com/xanmod/linux-patches/archive/$_commit.tar.gz"
  "${_patchsource}/uksm-patches-v2/0001-UKSM-for-5.17.patch"
  #"${_patchsources}/0001-arch-patches.patch"
  "${_patchsources}/0001-bbr2.patch"
  "${_patchsources}/0001-block-patches.patch"
  "${_patchsources}/0001-btrfs-patches.patch"
  "${_patchsources}/0001-clearlinux.patch"
  "${_patchsources}/0001-fixes-miscellaneous.patch"
  "${_patchsources}/0001-lrng.patch"
  #"${_patchsources}/0001-misc-new.patch"
  "${_patchsources}/0001-MG-LRU.patch"
  #"${_patchsources}/0001-net-patches.patch"
  "${_patchsources}/0001-pf-patches.patch"
  "${_patchsources}/sched/0001-tt.patch"
  "https://github.com/xanmod/linux-patches/raw/master/linux-5.17.y-xanmod/xanmod/0001-XANMOD-fair-Remove-all-energy-efficiency-functions.patch"
  # "https://github.com/xanmod/linux-patches/raw/master/linux-5.17.y-xanmod/xanmod/0003-XANMOD-block-set-rq_affinity-to-force-full-multithre.patch"
  "https://github.com/xanmod/linux-patches/raw/master/linux-5.17.y-xanmod/xanmod/0006-XANMOD-sched-autogroup-Add-kernel-parameter-and-conf.patch"
  # "https://github.com/xanmod/linux-patches/raw/master/linux-5.17.y-xanmod/xanmod/0008-XANMOD-cpufreq-tunes-ondemand-and-conservative-gover.patch"
  "https://github.com/xanmod/linux-patches/raw/master/linux-5.17.y-xanmod/xanmod/0009-XANMOD-scripts-disable-the-localversion-tag-of-a-git.patch"
  "https://github.com/xanmod/linux-patches/raw/master/linux-5.17.y-xanmod/xanmod/0010-XANMOD-lib-kconfig.debug-disable-default-CONFIG_SYMB.patch"
  "https://github.com/xanmod/linux-patches/raw/master/linux-5.17.y-xanmod/xanmod/0011-XANMOD-init-Kconfig-Enable-O3-KBUILD_CFLAGS-optimiza.patch"
  "https://github.com/xanmod/linux-patches/raw/master/linux-5.17.y-xanmod/xanmod/0012-XANMOD-Makefile-Turn-off-loop-vectorization-for-GCC-.patch"
)

validpgpkeys=(
  'ABAF11C65A2970B130ABE3C479BE3E4300411886'  # Linus Torvalds
  '647F28654894E3BD457199BE38DBBDC86092693E'  # Greg Kroah-Hartman
)

b2sums=('82dc4a45cc25c781ac67aa6ed1e4c369544154960f41c4634d47621f381159687a227054976d078524cda28884d395a15f7542fe44ca74ce98ca6ff54a81d6d0'
        'SKIP'
        '9ee936d2e384066eb2ab95f80b442baffc5d22d0369c0b2d358aa073fbbcaf64be79356030f6989bf60b2a2b145775e42d3e35cd5c8b58c74209b04d00032b3d'
        '20674a8fcc0a85726e06460a7dbccfe731c46bf377cc3bf511b7591175e7df892f271bc1909e77d9a02913c753d241493502c5ab15d9f78e95f31aa4399c2c27'
        '2a1e03f82e6901b730051408d76795021de2b425b6efb724b1f4a0d36f1b09e44ba478a7e929a3c5475dbfade152ce317c732d3a507b4b5e93ec62f539130d9c'
        'e757f54942093cb1eace6c0db779272399b98ce0c5f59f65410a6dd05c7f8d870d4bcc160525637f101a9c5e2d268681517a48bd6d0d8f0fb91511db59219f37'
        'ff708a10ed723b644cbe9eae86d96f5d4f54bc87be87d63cb6dd59505ca671b012085482bbcd8e9946ab1cfb69741731452d8edab1e3c2212f159138ae532fc0'
        'bf1e39492545261b0a94a92abe23d4ddf1b80677b9d54a2e5de8f5309ea1eacf6b83f3eb78b2533d4e30fe647ce62bd8a9b75f35a10f51afce1bf1a5143eb9c2'
        '9afc555a5aec1a0aec658fe1d2bb3595a9a47b9e82016fe63248a68095eb8ee2698cffb90e7c5895c847c4a1a543d8570909404d23768d5114896b8e861a6f62'
        '7ec12e127db5a9fbaa65ea83145a6ac9dbdf0556a4c33b37a544b5612646fd6421709ead9aabc17e9e161edd6640467a57ca41b6e39e7a2e050cb52dd967dd20'
        '04b71bbc4512fb65b3e6bb9e06a447f65d3c88f035879ce55b027e5073dc0e9c99889434899aa8296040cd56bccef53b97b5e6d8a0a1b4bc7bf9ba48d699edf6'
        '0c60aa8dc9557b78efe823ee1c5451a50ca2bac2cdaf49992b93d5106e8c908c57bd3a00de56f84b086a7baaef9026d131f8c925ecb68a0d51008a988f3d45a8'
        '8fe4c194e590f44f80d20f61bbcadc66ead8a37de4b1887515e25b9e1f80ecd77994b5afbc0327568190c019518d3fd59f5fdc9c909cbcce5f34d737e1fce4a3'
        'd88a1ca68a97c21d8cf5c5bd3ed67718b286f7f80cf9ee927c4a25dbceaef8cde7686c294421cbce039cb44397327d04cc2114d751b2ac8c9fec892790524490'
        '9a3222c9a56f173b051be294ad4189949d29dce1c152eae94b1b05cd6a798909fe2fe42f7699be93b3a845f0ebf673d98c3b16757a15fd1e08d86a5f297b338c'
        'd0dd0e8f3a1ad6683ae2f4e0e88a3b323ba0bfc3cf2c559ed6223f7ab979b2485506c5e5e7ac94626cbd2ad671da3f2d33cfbcc6d8759514d371ac5569703744'
        'e185a1dc68462e0deba3374dece3ee3a22db7e0c8abf42906366d4cf869d216648c402ce745fbb7c9d2096a77d6b5ff858f5f672b4bbca7d2716cdc2647f10a1'
        '11645a4a6215b1e90db285f9953301ed9d859436138d017d1437992c4fac73ed42df527fdc6c9a46920504ec2f11de0d2363da4d2b73e2478df67169a368e13f'
        '69a67d53b4a2f95d3cbd61cdf231f8a2475076220a2c623ec1d8d93caa9137ea66587c498cddface2fa76417a3d59a1ae38324c21822d90099709e26c2413722'
        'c9e68387eeea110bedd80a2dd49857793c0e48757ae49e427e38c062b48f58d9274a2ddf39ab2897042aec6fcd93eaae7efcfc85278b6843456e6d84f39e34ae'
        '1e06251a379d787c84bbaa84b41696672689c4a360c6d96975fc83751808fc7982400e096270c4e9c16289d31d4a23460326ae6d2f47fcf7e2baf0c74963b1a1')

export KBUILD_BUILD_HOST=archlinux
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

prepare() {
  cd linux-${pkgver}

  echo "Setting version..."
  scripts/setlocalversion --save-scmversion
  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux}" > localversion.20-pkgname

  sed -i '/select DEBUG_KERNEL/d' init/Kconfig
  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    msg2 "Applying patch $src..."
    patch -Np1 < "../$src"
  done

  msg2 "Setting config..."
  cp ../config .config

  # clang Full LTO
  if [ "${_compiler}" = "clang" ]; then
    msg2 "Enable FULL LTO"
    scripts/config --disable CONFIG_LTO_NONE
    scripts/config --disable CONFIG_LTO_CLANG_THIN
    scripts/config --enable CONFIG_LTO_CLANG_FULL
  fi

  scripts/config --enable CONFIG_CGROUPS
  scripts/config --enable CONFIG_CGROUP_SCHED
  scripts/config --enable CONFIG_RT_GROUP_SCHED

  # disable CONFIG_DEBUG_INFO=y at build time otherwise memory usage blows up
  # and can easily overwhelm a system with 32 GB of memory using a tmpfs build
  # partition ... this was introduced by FS#66260, see:
  # https://git.archlinux.org/svntogit/packages.git/commit/trunk?h=packages/linux&id=663b08666b269eeeeaafbafaee07fd03389ac8d7
  scripts/config --disable CONFIG_DEBUG_INFO
  scripts/config --disable CONFIG_DEBUG_KERNEL
  scripts/config --disable CONFIG_CGROUP_BPF
  scripts/config --disable CONFIG_BPF_LSM
  scripts/config --disable CONFIG_BPF_PRELOAD
  scripts/config --disable CONFIG_BPF_LIRC_MODE2
  scripts/config --disable CONFIG_BPF_KPROBE_OVERRIDE

  # https://bbs.archlinux.org/viewtopic.php?pid=1824594#p1824594
  scripts/config --enable CONFIG_PSI_DEFAULT_DISABLED

  # https://bbs.archlinux.org/viewtopic.php?pid=1863567#p1863567
  scripts/config --disable CONFIG_LATENCYTOP
  scripts/config --disable CONFIG_SCHED_DEBUG

  # FS#66613
  # https://bugzilla.kernel.org/show_bug.cgi?id=207173#c6
  scripts/config --disable CONFIG_KVM_WERROR
  scripts/config --enable CONFIG_KVM
  scripts/config --enable CONFIG_KVM_INTEL
  scripts/config --disable CONFIG_KVM_AMD

 
  msg2 "Enable O3"
  scripts/config --disable CONFIG_CC_OPTIMIZE_FOR_SIZE
  scripts/config --enable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3 

  msg2 "Enabling Linux Random Number Generator ..."
  msg2 "Enabling Linux Random Number Generator with pfkernel config..."
  scripts/config --enable CONFIG_LRNG
  scripts/config --enable CONFIG_LRNG_OVERSAMPLE_ENTROPY_SOURCES
  scripts/config --set-val CONFIG_CONFIG_LRNG_OVERSAMPLE_ES_BITS 64
  scripts/config --set-val CONFIG_LRNG_SEED_BUFFER_INIT_ADD_BITS 128
  scripts/config --enable CONFIG_LRNG_IRQ
  scripts/config --enable CONFIG_LRNG_CONTINUOUS_COMPRESSION_ENABLED
  scripts/config --disable CONFIG_LRNG_CONTINUOUS_COMPRESSION_DISABLED
  scripts/config --enable CONFIG_LRNG_ENABLE_CONTINUOUS_COMPRESSION
  scripts/config --enable CONFIG_LRNG_SWITCHABLE_CONTINUOUS_COMPRESSION
  scripts/config --disable CONFIG_LRNG_COLLECTION_SIZE_512
  scripts/config --enable CONFIG_LRNG_COLLECTION_SIZE_1024
  scripts/config --disable CONFIG_LRNG_COLLECTION_SIZE_2048
  scripts/config --disable CONFIG_LRNG_COLLECTION_SIZE_4096
  scripts/config --disable CONFIG_LRNG_COLLECTION_SIZE_8192
  scripts/config --set-val CONFIG_LRNG_COLLECTION_SIZE 1024
  scripts/config --enable CONFIG_LRNG_HEALTH_TESTS
  scripts/config --set-val CONFIG_LRNG_RCT_CUTOFF 31
  scripts/config --set-val CONFIG_LRNG_APT_CUTOFF 325
  scripts/config --set-val CONFIG_LRNG_IRQ_ENTROPY_RATE 256
  scripts/config --enable CONFIG_LRNG_JENT
  scripts/config --set-val CONFIG_LRNG_JENT_ENTROPY_RATE 16
  scripts/config --enable CONFIG_LRNG_CPU
  scripts/config --set-val CONFIG_LRNG_CPU_ENTROPY_RATE 8
  scripts/config --enable CONFIG_LRNG_DRNG_SWITCH
  scripts/config --enable CONFIG_LRNG_KCAPI_HASH
  scripts/config --module CONFIG_LRNG_DRBG
  scripts/config --module CONFIG_LRNG_KCAPI
  scripts/config --enable CONFIG_LRNG_TESTING_MENU
  scripts/config --disable CONFIG_LRNG_RAW_HIRES_ENTROPY
  scripts/config --disable CONFIG_LRNG_RAW_JIFFIES_ENTROPY
  scripts/config --disable CONFIG_LRNG_RAW_IRQ_ENTROPY
  scripts/config --disable CONFIG_LRNG_RAW_IRQFLAGS_ENTROPY
  scripts/config --disable CONFIG_LRNG_RAW_RETIP_ENTROPY
  scripts/config --disable CONFIG_LRNG_RAW_REGS_ENTROPY
  scripts/config --disable CONFIG_LRNG_RAW_ARRAY
  scripts/config --disable CONFIG_LRNG_IRQ_PERF
  scripts/config --disable CONFIG_LRNG_ACVT_HASH
  scripts/config --enable CONFIG_LRNG_RUNTIME_ES_CONFIG
  scripts/config --disable CONFIG_LRNG_RUNTIME_MAX_WO_RESEED_CONFIG
  scripts/config --disable CONFIG_LRNG_TEST_CPU_ES_COMPRESSION
  scripts/config --enable CONFIG_LRNG_SELFTEST
  scripts/config --disable CONFIG_LRNG_SELFTEST_PANIC

  ### Optionally set tickrate 
  if [ -n "$_417_HZ_ticks" ]; then
    msg2 "Setting tick rate to 417Hz..."
    scripts/config --disable CONFIG_HZ_300
    scripts/config --enable CONFIG_HZ_417
    scripts/config --set-val CONFIG_HZ 417
  fi 
  
  if [ -n "$_833_HZ_ticks" ]; then
    msg2 "Setting tick rate to 833Hz..."
    scripts/config --disable CONFIG_HZ_300
    scripts/config --enable CONFIG_HZ_833
    scripts/config --set-val CONFIG_HZ 833
  fi

  if [ -n "$_1000_HZ_ticks" ]; then
    msg2 "Setting tick rate to 1000Hz..."
    scripts/config --disable CONFIG_HZ_300
    scripts/config --enable CONFIG_HZ_1000
    scripts/config --set-val CONFIG_HZ 1000
  fi

  if [ -n "$_1666_HZ_ticks" ]; then
    msg2 "Setting tick rate to 1666Hz..."
    scripts/config --disable CONFIG_HZ_300
    scripts/config --enable CONFIG_HZ_1666
    scripts/config --set-val CONFIG_HZ 1666
  fi

  # BBR2
  msg2 "Enable BBR2"
  scripts/config --module CONFIG_TCP_CONG_CUBIC
  scripts/config --disable CONFIG_DEFAULT_CUBIC
  scripts/config --enable CONFIG_TCP_CONG_BBR2
  scripts/config --enable CONFIG_DEFAULT_BBR2
  scripts/config --set-str CONFIG_DEFAULT_TCP_CONG bbr2
  
  msg2 "Enable zram compression to LZ4"
  scripts/config --enable CONFIG_ZSMALLOC
  scripts/config --enable CONFIG_ZRAM
  scripts/config --disable CONFIG_ZRAM_DEF_COMP_LZORLE
  scripts/config --enable CONFIIG_ZRAM_DEF_COMP_LZ4
  scripts/config --set-str CONFIG_ZRAM_DEF_COMP lz4
  scripts/config --disable CONFIG_ZSWAP

  msg2 "Setting performance governor..."
  scripts/config --enable CONFIG_CPU_FREQ_GOV_ONDEMAND
  scripts/config --enable CONFIG_CPU_FREQ_GOV_PERFORMANCE
  scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL
  scripts/config --enable CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE

  scripts/config --disable CONFIG_NUMA

  msg2 "Enabling multigenerational LRU..."
  scripts/config --enable CONFIG_ARCH_HAS_NONLEAF_PMD_YOUNG
  scripts/config --enable CONFIG_LRU_GEN
  scripts/config --set-val CONFIG_NR_LRU_GENS 7
  scripts/config --set-val CONFIG_TIERS_PER_GEN 4
  scripts/config --enable CONFIG_LRU_GEN_ENABLED
  scripts/config --disable CONFIG_LRU_GEN_STATS

# these are ck's htrimer patches
  # msg2 "Patching with ck hrtimer patches..."
  # for i in ../linux-patches-"$_commit"/"$_xan"/ck-hrtimer/0*.patch; do
  #   patch -Np1 -i $i
  # done

  # non-interactively apply ck1 default options
  # this isn't redundant if we want a clean selection of subarch below
  make LLVM=$_LLVM LLVM_IAS=$_LLVM olddefconfig
  diff -u ../config .config || :

  # https://github.com/graysky2/kernel_gcc_patch
  # make sure to apply after olddefconfig to allow the next section
  msg2 "Patching to enable GCC optimization for other uarchs..."
  patch -Np1 -i "$srcdir/kernel_compiler_patch-$_gcc_more_v/more-uarches-for-kernel-5.17+.patch"

  if [ -n "$_subarch" ]; then
    # user wants a subarch so apply choice defined above interactively via 'yes'
    yes "$_subarch" | make LLVM=$_LLVM LLVM_IAS=$_LLVM oldconfig
  else
    # no subarch defined so allow user to pick one
    make LLVM=$_LLVM LLVM_IAS=$_LLVM oldconfig
  fi
  # make LLVM=$_LLVM LLVM_IAS=$_LLVM localyesconfig

  ### Optionally load needed modules for the make localmodconfig
  # See https://aur.archlinux.org/packages/modprobed-db
  if [ -n "$_localmodcfg" ]; then
    if [ -f $HOME/.config/modprobed.db ]; then
      msg2 "Running Steven Rostedt's make localmodconfig now"
      make LLVM=$_LLVM LLVM_IAS=$_LLVM LSMOD=$HOME/.config/modprobed.db localmodconfig
    else
      msg2 "No modprobed.db data found"
      exit
    fi
  fi

  make LLVM=$_LLVM LLVM_IAS=$_LLVM -s kernelrelease > version
  echo "Prepared $pkgbase version $(<version)"

  [[ -z "$_makenconfig" ]] || make LLVM=$_LLVM LLVM_IAS=$_LLVM nconfig

  # save configuration for later reuse
  cat .config > "${startdir}/config.last"

  # uncomment if you want to build with distcc
  ### sed -i '/HAVE_GCC_PLUGINS/d' arch/x86/Kconfig
}

build() {
  cd linux-${pkgver}
  make LLVM=$_LLVM LLVM_IAS=$_LLVM all
}

_package() {
  pkgdesc="The ${pkgbase/linux/Linux} kernel and modules with Con Kolivas' hrtimer patches and TT CPU scheduler by Hamad Al Marri and with some other patches"
  depends=(coreutils kmod initramfs)
  optdepends=('crda: to set the correct wireless channels of your country'
              'linux-firmware: firmware images needed for some devices')
  provides=(kvm winesync)
  # groups=('tt-uksm')

  cd linux-${pkgver}

  local kernver="$(<version)"
  local modulesdir="$pkgdir/usr/lib/modules/$kernver"

  echo "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  #install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"
  #
  # hard-coded path in case user defined CC=xxx for build which causes errors
  # see this FS https://bugs.archlinux.org/task/64315
  install -Dm644 arch/x86/boot/bzImage "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  echo "Installing modules..."
  #make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 modules_install
  # not needed since not building with CONFIG_DEBUG_INFO=y

  make LLVM=$_LLVM LLVM_IAS=$_LLVM INSTALL_MOD_PATH="$pkgdir/usr" modules_install

  # remove build and source links
  rm "$modulesdir"/{source,build}
}

_package-headers() {
  pkgdesc="Headers and scripts for building modules for ${pkgbase/linux/Linux} kernel"
  depends=("$pkgbase") # added to keep kernel and headers packages matched
  # groups=('tt-uksm')

  cd linux-${pkgver}
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts

  # add objtool for external module building and enabled VALIDATION_STACK option
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # add xfs and shmem for aufs building
  mkdir -p "$builddir"/{fs/xfs,mm}

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -bi "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  #echo "Stripping vmlinux..."
  #strip -v $STRIP_STATIC "$builddir/vmlinux"
  # not needed since not building with CONFIG_DEBUG_INFO=y

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"

}

pkgname=("$pkgbase" "$pkgbase-headers")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done

# vim:set ts=8 sts=2 sw=2 et:
