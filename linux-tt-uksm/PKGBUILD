# Maintainer: AntMan666 <945360554@qq.com>
# Contributor: Jan Alexander Steffens (heftig) <jan.steffens@gmail.com>
# Contributor: graysky <graysky AT archlinux DOT us>

### BUILD OPTIONS
# Set the next two variables to ANYTHING that is not null to enable them

# Tweak kernel options prior to a build via nconfig
_makenconfig=

# Only compile select modules to reduce the number of modules built
#
# To keep track of which modules are needed for your specific system/hardware,
# give module_db a try: https://aur.archlinux.org/packages/modprobed-db
# This PKGBUILD reads the database kept if it exists
# More at this wiki page ---> https://wiki.archlinux.org/index.php/Modprobed-db
_localmodcfg=

## Choose between GCC and CLANG config (default is GCC)
if [ -z ${_compiler+x} ]; then
  _compiler=gcc
fi

#  417 Hz is the TT alternative to 300 Hz. Choose 417 Hz
# if you prefer performance over latency.
_417_HZ_ticks=

# 833 Hz is the TT alternative to 1000 Hz. Choose 833 Hz
#  if you want a balance between latency and performance.
_833_HZ_ticks=

# ck recommends 1000 Hz tick and the hrtimer patches in lieu of ck1
_1000_HZ_ticks=y
 
# 1666 Hz is for very high latency bound systems. Choose 1666 Hz
# if you don't care about overall throughput or performance, but
# you care more about latency (some realtime applications) require
# low latency. The response and interactive processes with 1666 Hz
# feel much snappier.
_1666_HZ_ticks=

# Optionally select a sub architecture by number or leave blank which will
# require user interaction during the build. Note that the generic (default)
# option is 36.
#
#  1. AMD Opteron/Athlon64/Hammer/K8 (MK8)
#  2. AMD Opteron/Athlon64/Hammer/K8 with SSE3 (MK8SSE3) (NEW)
#  3. AMD 61xx/7x50/PhenomX3/X4/II/K10 (MK10) (NEW)
#  4. AMD Barcelona (MBARCELONA) (NEW)
#  5. AMD Bobcat (MBOBCAT) (NEW)
#  6. AMD Jaguar (MJAGUAR) (NEW)
#  7. AMD Bulldozer (MBULLDOZER) (NEW)
#  8. AMD Piledriver (MPILEDRIVER) (NEW)
#  9. AMD Steamroller (MSTEAMROLLER) (NEW)
#  10. AMD Excavator (MEXCAVATOR) (NEW)
#  11. AMD Zen (MZEN) (NEW)
#  12. AMD Zen 2 (MZEN2) (NEW)
#  13. AMD Zen 3 (MZEN3) (NEW)
#  14. Intel P4 / older Netburst based Xeon (MPSC)
#  15. Intel Core 2 (MCORE2)
#  16. Intel Atom (MATOM)
#  17. Intel Nehalem (MNEHALEM) (NEW)
#  18. Intel Westmere (MWESTMERE) (NEW)
#  19. Intel Silvermont (MSILVERMONT) (NEW)
#  20. Intel Goldmont (MGOLDMONT) (NEW)
#  21. Intel Goldmont Plus (MGOLDMONTPLUS) (NEW)
#  22. Intel Sandy Bridge (MSANDYBRIDGE) (NEW)
#  23. Intel Ivy Bridge (MIVYBRIDGE) (NEW)
#  24. Intel Haswell (MHASWELL) (NEW)
#  25. Intel Broadwell (MBROADWELL) (NEW)
#  26. Intel Skylake (MSKYLAKE) (NEW)
#  27. Intel Skylake X (MSKYLAKEX) (NEW)
#  28. Intel Cannon Lake (MCANNONLAKE) (NEW)
#  29. Intel Ice Lake (MICELAKE) (NEW)
#  30. Intel Cascade Lake (MCASCADELAKE) (NEW)
#  31. Intel Cooper Lake (MCOOPERLAKE) (NEW)
#  32. Intel Tiger Lake (MTIGERLAKE) (NEW)
#  33. Intel Sapphire Rapids (MSAPPHIRERAPIDS) (NEW)
#  34. Intel Rocket Lake (MROCKETLAKE) (NEW)
#  35. Intel Alder Lake (MALDERLAKE) (NEW)
#  36. Generic-x86-64 (GENERIC_CPU)
#  37. Generic-x86-64-v2 (GENERIC_CPU2) (NEW)
#  38. Generic-x86-64-v3 (GENERIC_CPU3) (NEW)
#  39. Generic-x86-64-v4 (GENERIC_CPU4) (NEW)
#  40. Intel-Native optimizations autodetected by GCC (MNATIVE_INTEL) (NEW)
#  41. AMD-Native optimizations autodetected by GCC (MNATIVE_AMD) (NEW)
_subarch=15

### IMPORTANT: Do no edit below this line unless you know what you're doing
pkgbase=linux-tt-uksm
pkgver=5.16.2
pkgrel=1
arch=(x86_64)
url="https://github.com/hamadmarri/TT-CPU-Scheduler"
license=(GPL2)
makedepends=(
  bc kmod libelf cpio perl tar xz
)
if [ "${_compiler}" = "clang" ]; then
  makedepends+=(clang llvm lld python)
  _LLVM=1
fi
options=('!strip')

# https://ck-hack.blogspot.com/2021/08/514-and-future-of-muqss-and-ck-once.html
# thankfully xanmod keeps the hrtimer patches up to date
_commit=6b08df20f31708099a7fbccf5448958b4836118f
_xan=linux-5.15.y-xanmod
_gcc_more_v=20211114
_patchsource="https://gitlab.com/sirlucjan/kernel-patches/-/raw/master/5.16"
_patchsources="https://raw.githubusercontent.com/ptr1337/kernel-patches/master/5.16"

source=(
  "https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-$pkgver.tar".{xz,sign}
  config         # the main kernel config file
  "more-uarches-$_gcc_more_v.tar.gz::https://github.com/graysky2/kernel_compiler_patch/archive/$_gcc_more_v.tar.gz"
  "xanmod-patches-from-ck-$_commit.tar.gz::https://github.com/xanmod/linux-patches/archive/$_commit.tar.gz"
  # "https://raw.githubusercontent.com/RiverOnVenus/kernel-patches/master/5.16/arch/0001-arch-patches.patch"
# "https://raw.githubusercontent.com/hamadmarri/TT-CPU-Scheduler/master/patches/5.16/tt-5.16.patch"
  "${_patchsources}/0001-arch-patches.patch"
  "${_patchsources}/sched/0001-tt.patch"
  "${_patchsource}/uksm-patches/0001-UKSM-for-5.16.patch"
  "${_patchsources}/0001-futex-winesync.patch"
  "${_patchsource}/bbr2-patches-v2/0001-bbr2-patches.patch"
  "${_patchsource}/block-patches/0001-block-patches.patch"
  "${_patchsources}/0001-btrfs.patch"
  "${_patchsources}/0001-fixes-miscellaneous.patch"
  "${_patchsources}/0001-clearlinux.patch"
  "${_patchsources}/0001-lru-patches.patch"
  # "${_patchsources}/0001-intel-patches.patch"
  "${_patchsources}/0001-lrng.patch"
  # "${_patchsource}/zstd-patches/0001-zstd-patches.patch"
  "${_patchsources}/0001-zstd-patches.patch"
  "https://github.com/xanmod/linux-patches/raw/master/linux-5.16.y-xanmod/xanmod/0001-XANMOD-fair-Remove-all-energy-efficiency-functions.patch"
  "https://github.com/xanmod/linux-patches/raw/master/linux-5.16.y-xanmod/xanmod/0006-XANMOD-sched-autogroup-Add-kernel-parameter-and-conf.patch"
  "https://github.com/xanmod/linux-patches/raw/master/linux-5.16.y-xanmod/xanmod/0008-XANMOD-cpufreq-tunes-ondemand-and-conservative-gover.patch"
  "https://github.com/xanmod/linux-patches/raw/master/linux-5.16.y-xanmod/xanmod/0010-XANMOD-lib-kconfig.debug-disable-default-CONFIG_SYMB.patch"
  "https://github.com/xanmod/linux-patches/raw/master/linux-5.16.y-xanmod/xanmod/0011-XANMOD-init-Kconfig-Enable-O3-KBUILD_CFLAGS-optimiza.patch"
  "https://github.com/xanmod/linux-patches/raw/master/linux-5.16.y-xanmod/xanmod/0012-XANMOD-Makefile-Turn-off-loop-vectorization-for-GCC-.patch"
)

validpgpkeys=(
  'ABAF11C65A2970B130ABE3C479BE3E4300411886'  # Linus Torvalds
  '647F28654894E3BD457199BE38DBBDC86092693E'  # Greg Kroah-Hartman
)

b2sums=('6f07d9da86101ab72eadd53a9f58a4740037608a006fc622a923d4dd9578ce62cc9959711dca2e953e3fb68286f55fb14be04a4a00fc49a33c2c28bd5944532f'
        'SKIP'
        '9fc32f2efe1e71b08af3383e849a3ad66771f70211823b3659efe94bc4179a9b87583ac5cdbcacc8904bb3c1d69445d291ac0637344a689fce232a385587e547'
        '534091fb5034226d48f18da2114305860e67ee49a1d726b049a240ce61df83e840a9a255e5b8fa9279ec07dd69fb0aea6e2e48962792c2b5367db577a4423d8d'
        '7e12da62ddc8535b044f57447e15b550dc2d1421bba4fc830dfad7b328b01f21190f63c5534b9af6a8c09f56bfb9c21014b07645569a6c7b93b950aca07ade5a'
        'b450eb15cfb2beb3277c85656f319b063206a305ca99b38f695289889ae6f94c47f48483e4f3502705dbe7a7854b912767ce0d8296c0124c5968676e3cf64c6a'
        'ecc740bb302b67ab1228be17c9c2e81259b19aef5efe50d887cb7224a750fedf6c01d7446f8b96b4ddd7eaf7097750108046e46b4afb13f93bf7fc30a3397799'
        '9139215eb0d7af1448c1b1722059430f8aa95b4c8d7611776599cc94064e9ec7e09b02c2fd07487a3aa1b73ecefad09c7944eec73a2f0a422cda049aaed58847'
        '8c35fe0a14d8aad8ec68a4f56211040c01ea2bb662eb35f201a6a8ee4649fa3c3c4355ba154ca78f1000e4da2fae3eee552a342c0bcc74c2b2f14a363b92ba76'
        '36d2b9fda4230c54c7bf64f1ef8e4ee8e3c9f0c04c57ac47a3640353b32df36b24e86d39c33cc82d87f0a42d2e2627fc4c7d312644f2d218ec365332e4224611'
        'ede2f6ade748cac8e2ed46e092c7551f93cebe32b98b61911908d7d3ab2ee0ea08091b17723ebb2016c92b0488c74bb13b4c4453ea4fcc57c3cf38231c7eefbf'
        '00d3124491b6563752e35988926de75349a4010ec05289407675f9332c9753c25799288dee9ecb88bde14d5766c36d44f7844f3868ea70c72c0972d5556f8797'
        '580c874542d4c194775b74ff78903d4dfa1ee25deb97327263dc61cdf7eb1531ec0361b2f544e90b28ec47a743b7d1b2afeffaef6fc4f616ffc4834d7f0a05da'
        '4778fc0c6c0a03b6bd13e8b337c5c7e2e330132317e673efa45d643a489bc7c68c3e524ff72eca5cb12bee0f0043c03ca5795fd4aef2c2d6cbbb6d45fa682dea'
        'ce3707a5c4e933810c5fbedf9ebdebf227496e8dc131503e373727fdeab48594c76d7039baa5efcb102f18a5ee3e5ae6c12d64ad333c450d0c4b3331173975be'
        'b5b5e7466a0f25074990006ab0fa2dccbe1c8bba21383fc87762bec9ae33b679e4a2a7dbaf0ff197d4345fbaf2918240faf6f842b004de2e3db6842db73504c4'
        '3cbf8e8c42521e3cc8edf46a4e56e28cb9b01ac9a1c9aefa768c5f4994a2f29c6712b20eb821751c2c64139b95efffc08bff5cc2b1d4c57f96e09207039eb305'
        '7909cc383f46e4ea804c8ec54f42bc636923e3b7ee786d55b9932c7ff16edb3f704db21161dc9380801902dc950cf6ed2aed428ed3290a552d5955999504ecea'
        'aeaf662a0aca322221874fbd6ce5799a0485985149944ad73be7769ef748baa664299ddebfd59cbf2cd8d6360c7600289f656c3cf522ec06805b40c2702aeaa0'
        '406d3540321c6a5139924eb7a36ab9e3f8df0b597a3cd4635678d21e3847084076bede188d8fac1a5a55cb9bdcbc7afbe183276dc86632920167f5c9f0bed68e'
        'a87d1cba6641e1974f6020248ded21e16791caafe70ddb2c636fd502c3f1f4ea1db60ddb936d1f19fcb8022b8e5527b1eba38c378e6c35b9cbd8a654cde388b2'
        'ed60acb2899a24e727d42428e7ce0dc045e130ba1e84b675077019a613a6ae8add7d4d1d0477998194c5163cded0775ed0713b68f88237b092faa75dfab80167'
        '2357375432551242d097b08231096a06579b191c983152937d0e2236291f31b6e3641b63dea83cdfd722f477d9e30d4829100a87aab61d170c9eefa54acb7ea2')

export KBUILD_BUILD_HOST=archlinux
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

prepare() {
  cd linux-${pkgver}

  echo "Setting version..."
  scripts/setlocalversion --save-scmversion
  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux}" > localversion.20-pkgname

  sed -i '/select DEBUG_KERNEL/d' init/Kconfig
  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    msg2 "Applying patch $src..."
    patch -Np1 < "../$src"
  done

  msg2 "Setting config..."
  cp ../config .config

  # clang Full LTO
  if [ "${_compiler}" = "clang" ]; then
    msg2 "Enable FULL LTO"
    scripts/config --disable CONFIG_LTO_NONE
    scripts/config --disable CONFIG_LTO_CLANG_THIN
    scripts/config --enable CONFIG_LTO_CLANG_FULL
  fi

  scripts/config --enable CONFIG_CGROUPS
  scripts/config --enable CONFIG_CGROUP_SCHED
  scripts/config --enable CONFIG_RT_GROUP_SCHED

  # disable CONFIG_DEBUG_INFO=y at build time otherwise memory usage blows up
  # and can easily overwhelm a system with 32 GB of memory using a tmpfs build
  # partition ... this was introduced by FS#66260, see:
  # https://git.archlinux.org/svntogit/packages.git/commit/trunk?h=packages/linux&id=663b08666b269eeeeaafbafaee07fd03389ac8d7
  scripts/config --disable CONFIG_DEBUG_INFO
  scripts/config --disable CONFIG_DEBUG_KERNEL
  scripts/config --disable CONFIG_CGROUP_BPF
  scripts/config --disable CONFIG_BPF_LSM
  scripts/config --disable CONFIG_BPF_PRELOAD
  scripts/config --disable CONFIG_BPF_LIRC_MODE2
  scripts/config --disable CONFIG_BPF_KPROBE_OVERRIDE

  # https://bbs.archlinux.org/viewtopic.php?pid=1824594#p1824594
  scripts/config --enable CONFIG_PSI_DEFAULT_DISABLED

  # https://bbs.archlinux.org/viewtopic.php?pid=1863567#p1863567
  scripts/config --disable CONFIG_LATENCYTOP
  scripts/config --disable CONFIG_SCHED_DEBUG

  # FS#66613
  # https://bugzilla.kernel.org/show_bug.cgi?id=207173#c6
  scripts/config --disable CONFIG_KVM_WERROR
 
  msg2 "Enable O3"
  scripts/config --disable CONFIG_CC_OPTIMIZE_FOR_SIZE
  scripts/config --enable CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3 

  msg2 "Enabling Linux Random Number Generator ..."
  msg2 "Enabling Linux Random Number Generator with pfkernel config..."
  scripts/config --enable CONFIG_LRNG
  scripts/config --enable CONFIG_LRNG_OVERSAMPLE_ENTROPY_SOURCES
  scripts/config --set-val CONFIG_CONFIG_LRNG_OVERSAMPLE_ES_BITS 64
  scripts/config --set-val CONFIG_LRNG_SEED_BUFFER_INIT_ADD_BITS 128
  scripts/config --enable CONFIG_LRNG_IRQ
  scripts/config --enable CONFIG_LRNG_CONTINUOUS_COMPRESSION_ENABLED
  scripts/config --disable CONFIG_LRNG_CONTINUOUS_COMPRESSION_DISABLED
  scripts/config --enable CONFIG_LRNG_ENABLE_CONTINUOUS_COMPRESSION
  scripts/config --enable CONFIG_LRNG_SWITCHABLE_CONTINUOUS_COMPRESSION
  scripts/config --disable CONFIG_LRNG_COLLECTION_SIZE_512
  scripts/config --enable CONFIG_LRNG_COLLECTION_SIZE_1024
  scripts/config --disable CONFIG_LRNG_COLLECTION_SIZE_2048
  scripts/config --disable CONFIG_LRNG_COLLECTION_SIZE_4096
  scripts/config --disable CONFIG_LRNG_COLLECTION_SIZE_8192
  scripts/config --set-val CONFIG_LRNG_COLLECTION_SIZE 1024
  scripts/config --enable CONFIG_LRNG_HEALTH_TESTS
  scripts/config --set-val CONFIG_LRNG_RCT_CUTOFF 31
  scripts/config --set-val CONFIG_LRNG_APT_CUTOFF 325
  scripts/config --set-val CONFIG_LRNG_IRQ_ENTROPY_RATE 256
  scripts/config --enable CONFIG_LRNG_JENT
  scripts/config --set-val CONFIG_LRNG_JENT_ENTROPY_RATE 16
  scripts/config --enable CONFIG_LRNG_CPU
  scripts/config --set-val CONFIG_LRNG_CPU_ENTROPY_RATE 8
  scripts/config --enable CONFIG_LRNG_DRNG_SWITCH
  scripts/config --enable CONFIG_LRNG_KCAPI_HASH
  scripts/config --module CONFIG_LRNG_DRBG
  scripts/config --module CONFIG_LRNG_KCAPI
  scripts/config --enable CONFIG_LRNG_TESTING_MENU
  scripts/config --disable CONFIG_LRNG_RAW_HIRES_ENTROPY
  scripts/config --disable CONFIG_LRNG_RAW_JIFFIES_ENTROPY
  scripts/config --disable CONFIG_LRNG_RAW_IRQ_ENTROPY
  scripts/config --disable CONFIG_LRNG_RAW_IRQFLAGS_ENTROPY
  scripts/config --disable CONFIG_LRNG_RAW_RETIP_ENTROPY
  scripts/config --disable CONFIG_LRNG_RAW_REGS_ENTROPY
  scripts/config --disable CONFIG_LRNG_RAW_ARRAY
  scripts/config --disable CONFIG_LRNG_IRQ_PERF
  scripts/config --disable CONFIG_LRNG_ACVT_HASH
  scripts/config --enable CONFIG_LRNG_RUNTIME_ES_CONFIG
  scripts/config --disable CONFIG_LRNG_RUNTIME_MAX_WO_RESEED_CONFIG
  scripts/config --disable CONFIG_LRNG_TEST_CPU_ES_COMPRESSION
  scripts/config --enable CONFIG_LRNG_SELFTEST
  scripts/config --disable CONFIG_LRNG_SELFTEST_PANIC

  ### Optionally set tickrate 
  if [ -n "$_417_HZ_ticks" ]; then
    msg2 "Setting tick rate to 417Hz..."
    scripts/config --disable CONFIG_HZ_300
    scripts/config --enable CONFIG_HZ_417
    scripts/config --set-val CONFIG_HZ 417
  fi 
  
  if [ -n "$_833_HZ_ticks" ]; then
    msg2 "Setting tick rate to 833Hz..."
    scripts/config --disable CONFIG_HZ_300
    scripts/config --enable CONFIG_HZ_833
    scripts/config --set-val CONFIG_HZ 833
  fi

  if [ -n "$_1000_HZ_ticks" ]; then
    msg2 "Setting tick rate to 1000Hz..."
    scripts/config --disable CONFIG_HZ_300
    scripts/config --enable CONFIG_HZ_1000
    scripts/config --set-val CONFIG_HZ 1000
  fi

  if [ -n "$_1666_HZ_ticks" ]; then
    msg2 "Setting tick rate to 1666Hz..."
    scripts/config --disable CONFIG_HZ_300
    scripts/config --enable CONFIG_HZ_1666
    scripts/config --set-val CONFIG_HZ 1666
  fi

  # BBR2
  msg2 "Enable BBR2"
  scripts/config --module CONFIG_TCP_CONG_CUBIC
  scripts/config --disable CONFIG_DEFAULT_CUBIC
  scripts/config --enable CONFIG_TCP_CONG_BBR2
  scripts/config --enable CONFIG_DEFAULT_BBR2
  scripts/config --set-str CONFIG_DEFAULT_TCP_CONG bbr2

  msg2 "Setting performance governor..."
  scripts/config --enable CONFIG_CPU_FREQ_GOV_ONDEMAND
  scripts/config --enable CONFIG_CPU_FREQ_GOV_PERFORMANCE
  scripts/config --enable CONFIG_CPU_FREQ_GOV_SCHEDUTIL
  scripts/config --disable CONFIG_CPU_FREQ_DEFAULT_GOV_SCHEDUTIL
  scripts/config --enable CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE

  scripts/config --disable CONFIG_NUMA

  msg2 "Enabling multigenerational LRU..."
  scripts/config --enable CONFIG_ARCH_HAS_NONLEAF_PMD_YOUNG
  scripts/config --enable CONFIG_LRU_GEN
  scripts/config --set-val CONFIG_NR_LRU_GENS 7
  scripts/config --set-val CONFIG_TIERS_PER_GEN 4
  scripts/config --enable CONFIG_LRU_GEN_ENABLED
  scripts/config --disable CONFIG_LRU_GEN_STATS

# these are ck's htrimer patches
  msg2 "Patching with ck hrtimer patches..."
  for i in ../linux-patches-"$_commit"/"$_xan"/ck-hrtimer/0*.patch; do
    patch -Np1 -i $i
  done

  # non-interactively apply ck1 default options
  # this isn't redundant if we want a clean selection of subarch below
  make LLVM=$_LLVM LLVM_IAS=$_LLVM olddefconfig
  diff -u ../config .config || :

  # https://github.com/graysky2/kernel_gcc_patch
  # make sure to apply after olddefconfig to allow the next section
  msg2 "Patching to enable GCC optimization for other uarchs..."
  patch -Np1 -i "$srcdir/kernel_compiler_patch-$_gcc_more_v/more-uarches-for-kernel-5.15+.patch"

  if [ -n "$_subarch" ]; then
    # user wants a subarch so apply choice defined above interactively via 'yes'
    yes "$_subarch" | make LLVM=$_LLVM LLVM_IAS=$_LLVM oldconfig
  else
    # no subarch defined so allow user to pick one
    make LLVM=$_LLVM LLVM_IAS=$_LLVM oldconfig
  fi
  # make LLVM=$_LLVM LLVM_IAS=$_LLVM localyesconfig

  ### Optionally load needed modules for the make localmodconfig
  # See https://aur.archlinux.org/packages/modprobed-db
  if [ -n "$_localmodcfg" ]; then
    if [ -f $HOME/.config/modprobed.db ]; then
      msg2 "Running Steven Rostedt's make localmodconfig now"
      make LLVM=$_LLVM LLVM_IAS=$_LLVM LSMOD=$HOME/.config/modprobed.db localmodconfig
    else
      msg2 "No modprobed.db data found"
      exit
    fi
  fi

  make LLVM=$_LLVM LLVM_IAS=$_LLVM -s kernelrelease > version
  echo "Prepared $pkgbase version $(<version)"

  [[ -z "$_makenconfig" ]] || make LLVM=$_LLVM LLVM_IAS=$_LLVM nconfig

  # save configuration for later reuse
  cat .config > "${startdir}/config.last"

  # uncomment if you want to build with distcc
  ### sed -i '/HAVE_GCC_PLUGINS/d' arch/x86/Kconfig
}

build() {
  cd linux-${pkgver}
  make LLVM=$_LLVM LLVM_IAS=$_LLVM all
}

_package() {
  pkgdesc="The ${pkgbase/linux/Linux} kernel and modules with Con Kolivas' hrtimer patches and TT CPU scheduler by Hamad Al Marri and with some other patches"
  depends=(coreutils kmod initramfs)
  optdepends=('crda: to set the correct wireless channels of your country'
              'linux-firmware: firmware images needed for some devices')
  provides=(kvm winesync)
  # groups=('tt-uksm')

  cd linux-${pkgver}

  local kernver="$(<version)"
  local modulesdir="$pkgdir/usr/lib/modules/$kernver"

  echo "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  #install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"
  #
  # hard-coded path in case user defined CC=xxx for build which causes errors
  # see this FS https://bugs.archlinux.org/task/64315
  install -Dm644 arch/x86/boot/bzImage "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  echo "Installing modules..."
  #make INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 modules_install
  # not needed since not building with CONFIG_DEBUG_INFO=y

  make LLVM=$_LLVM LLVM_IAS=$_LLVM INSTALL_MOD_PATH="$pkgdir/usr" modules_install

  # remove build and source links
  rm "$modulesdir"/{source,build}
}

_package-headers() {
  pkgdesc="Headers and scripts for building modules for ${pkgbase/linux/Linux} kernel"
  depends=("$pkgbase") # added to keep kernel and headers packages matched
  # groups=('tt-uksm')

  cd linux-${pkgver}
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts

  # add objtool for external module building and enabled VALIDATION_STACK option
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # add xfs and shmem for aufs building
  mkdir -p "$builddir"/{fs/xfs,mm}

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -bi "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  #echo "Stripping vmlinux..."
  #strip -v $STRIP_STATIC "$builddir/vmlinux"
  # not needed since not building with CONFIG_DEBUG_INFO=y

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"

}

pkgname=("$pkgbase" "$pkgbase-headers")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done

# vim:set ts=8 sts=2 sw=2 et:
